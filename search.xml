<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo博客部署PWA</title>
    <url>/Hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2PWA.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>渐进式网络应用程序（Progressive Web Apps，PWA）是一种运用现代的 Web API 以及传统的渐进式增强策略创建的跨平台 Web 应用程序。这类应用程序应用广泛、功能丰富，结合现代化浏览器提供的功能和移动设备的体验优势，使其具有与原生应用相同的用户体验优势。<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[渐进式 Web 应用（PWA）|MDN web docs](https://developer.mozilla.org/zh-CN/docs/Web/Progressive_web_apps)
">[1]</span></a></sup></p>
<a id="more"></a>

<h2 id="PWA介绍"><a href="#PWA介绍" class="headerlink" title="PWA介绍"></a>PWA介绍</h2><p>当博客网站实现了 PWA 功能后，使用 Google Chrome 浏览器访问时，就会发现浏览器地址栏右侧有一个带圈的 ➕ 符号，并会提醒你安装此网页到桌面。如果你是用手机访问的话，Chrome 就会在页面的底部提醒你安装网站。<br>PWA的特点<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[博客实现PWA](https://guanqr.com/study/blog/realize-pwa/)
">[2]</span></a></sup>：</p>
<ul>
<li>安装博客到电脑或手机，以原生应用相同的方式浏览博客；</li>
<li>博客浏览速度更快；</li>
<li>可以离线浏览博客；</li>
</ul>
<ol>
<li>对于读者，博客可一触即达，且无浏览器的地址栏、菜单栏等「无关」干扰；对于博客，非常有利于博客的用户留存率，也利于博客的品牌形象;</li>
<li>可以利用 Service Worker 的缓存特点，极大地加速你的博客;</li>
<li>能让你的博客更贴近 APP 的形象。</li>
</ol>
<p>PWA部署对博客具有不少要求，需要网站支持全站HTTPS、响应式布局等，具体可参见<a href="https://developers.google.com/web/progressive-web-apps/checklist" target="_blank" rel="noopener">Checklist</a>，同时可以在网站<a href="https://www.webpagetest.org/lighthouse" target="_blank" rel="noopener">Lighthouse</a>检查博客网站是否满足PWA的要求。<br><img src="/images/pwa-lighthouse.png" alt="Lighthouse检测结果"><i class="img-caption">☆ Lighthouse检测结果</i></p>
<h2 id="PWA插件部署"><a href="#PWA插件部署" class="headerlink" title="PWA插件部署"></a>PWA插件部署</h2><p>Hexo支持PWA部署的插件有三款，来自网上教程<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[博客实现PWA](https://guanqr.com/study/blog/realize-pwa/)
">[2]</span></a></sup>的分享，三款插件各有利弊，同时另一款插件不局限于Hexo使用，且更具优点。实现PWA的Hexo插件：</p>
<table>
<thead>
<tr>
<th>插件名称</th>
<th align="center">安装方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://github.com/zoumiaojiang/hexo-service-worker" target="_blank" rel="noopener">hexo-sercive-worker</a></td>
<td align="center"><code>npm install hexo-service-worker --save</code></td>
<td><a href="#service-worker">hexo-service-worker配置</a></td>
</tr>
<tr>
<td><a href="https://github.com/JLHwung/hexo-offline" target="_blank" rel="noopener">hexo-offline</a></td>
<td align="center"><code>npm install hexo-offline --save</code></td>
<td><a href="#offline">hexo-offline配置</a></td>
</tr>
<tr>
<td><a href="https://github.com/lavas-project/hexo-pwa" target="_blank" rel="noopener">hexo-pwa</a></td>
<td align="center"><code>npm install hexo-pwa --save</code></td>
<td><a href="#hexo-pwa">hexo-pwa配置</a></td>
</tr>
</tbody></table>
<h3 id="hexo-service-worker配置"><a href="#hexo-service-worker配置" class="headerlink" title="hexo-service-worker配置"></a><span id="service-worker">hexo-service-worker配置</span></h3><p>在博客站点配置文件<code>../hexo/_config.yml</code>中配置<code>service worker</code>：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># offline config passed to sw-precache.</span></span><br><span class="line"><span class="attr">service_worker:</span></span><br><span class="line">  <span class="attr">maximumFileSizeToCacheInBytes:</span> <span class="number">5242880</span></span><br><span class="line">  <span class="attr">staticFileGlobs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">public/about/index.html</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">public/favicon.ico</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">public/manifest.json</span></span><br><span class="line">  <span class="attr">stripPrefix:</span> <span class="string">public</span></span><br><span class="line">  <span class="attr">verbose:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">runtimeCaching:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">urlPattern:</span> <span class="string">/**/*</span></span><br><span class="line">      <span class="attr">handler:</span> <span class="string">cacheFirst</span></span><br><span class="line">      <span class="attr">options:</span></span><br><span class="line">        <span class="attr">origin:</span> <span class="string">hostname</span></span><br></pre></td></tr></table></figure>
<p><strong>配置说明</strong>：</p>
<ol>
<li><code>staticFileGlobs</code>是首次加载时主动缓存的文件，根据自身实际修改，建议不设置博客首页即<code>index.html</code>，否则要去除首页或更新为<code>Workbox</code>时用户需要手动清除浏览器缓存才能更新，但不加上首页可能导致无法离线访问博客。</li>
<li><code>origin</code>中<code>hostname</code>修改为博客域名。</li>
<li>博客支持全站HTTPS。</li>
</ol>
<p><strong>存在问题</strong><br>存在<code>sw.js</code>无法被浏览器识别的情况，网站无法自动更新，访问者需要手动清楚缓存才能访问最新内容。</p>
<h3 id="hexo-offline配置"><a href="#hexo-offline配置" class="headerlink" title="hexo-offline配置"></a><span id="offline">hexo-offline配置</span></h3><p>配置与<code>hexo-service-worker</code>基本一致，在博客站点配置文件<code>../hexo/_config.yml</code>中配置<code>offline</code>：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># offline config passed to sw-precache.</span></span><br><span class="line"><span class="attr">offline:</span></span><br><span class="line">  <span class="attr">maximumFileSizeToCacheInBytes:</span> <span class="number">5242880</span></span><br><span class="line">  <span class="attr">staticFileGlobs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">public/about/index.html</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">public/favicon.ico</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">public/manifest.json</span></span><br><span class="line">  <span class="attr">stripPrefix:</span> <span class="string">public</span></span><br><span class="line">  <span class="attr">verbose:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">runtimeCaching:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">urlPattern:</span> <span class="string">/**/*</span></span><br><span class="line">      <span class="attr">handler:</span> <span class="string">cacheFirst</span></span><br><span class="line">      <span class="attr">options:</span></span><br><span class="line">        <span class="attr">origin:</span> <span class="string">hostname</span></span><br></pre></td></tr></table></figure>
<p>配置说明参照<code>hexo-service-worker配置说明</code>。</p>
<h3 id="hexo-pwa配置"><a href="#hexo-pwa配置" class="headerlink" title="hexo-pwa配置"></a><span id="hexo-pwa">hexo-pwa配置</span></h3><p>此处配置已经包含<code>manifest.json</code>的配置即无需额外配置<code>manifest.json</code>，当插件运行时会自动生成<code>manifest.json</code>，在博客站点配置文件<code>../hexo/_config.yml</code>中添加以下内容：</p>
<details>
<summary>点击查看具体代码</summary>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">pwa:</span></span><br><span class="line">  <span class="attr">manifest:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/manifest.json</span></span><br><span class="line">    <span class="attr">body:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">hexo</span></span><br><span class="line">      <span class="attr">short_name:</span> <span class="string">hexo</span></span><br><span class="line">      <span class="attr">icons:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">src:</span> <span class="string">/images/android-chrome-192x192.png</span></span><br><span class="line">          <span class="attr">sizes:</span> <span class="string">192x192</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">image/png</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">src:</span> <span class="string">/images/android-chrome-512x512.png</span></span><br><span class="line">          <span class="attr">sizes:</span> <span class="string">512x512</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">image/png</span></span><br><span class="line">      <span class="attr">start_url:</span> <span class="string">/index.html</span></span><br><span class="line">      <span class="attr">theme_color:</span> <span class="string">'#ffffff'</span></span><br><span class="line">      <span class="attr">background_color:</span> <span class="string">'#ffffff'</span></span><br><span class="line">      <span class="attr">display:</span> <span class="string">standalone</span></span><br><span class="line">  <span class="attr">serviceWorker:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/sw.js</span></span><br><span class="line">    <span class="attr">preload:</span></span><br><span class="line">      <span class="attr">urls:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/</span></span><br><span class="line">      <span class="attr">posts:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">opts:</span></span><br><span class="line">      <span class="attr">networkTimeoutSeconds:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">pattern:</span> <span class="type">!!js</span><span class="string">/regexp</span> <span class="string">/hm.baidu.com/</span></span><br><span class="line">        <span class="attr">strategy:</span> <span class="string">networkOnly</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">pattern:</span> <span class="type">!!js</span><span class="string">/regexp</span> <span class="string">/.*\.(js|css|jpg|jpeg|png|gif)$/</span></span><br><span class="line">        <span class="attr">strategy:</span> <span class="string">cacheFirst</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">pattern:</span> <span class="type">!!js</span><span class="string">/regexp</span> <span class="string">/\//</span></span><br><span class="line">        <span class="attr">strategy:</span> <span class="string">networkFirst</span></span><br><span class="line">  <span class="attr">priority:</span> <span class="number">5</span></span><br></pre></td></tr></table></figure>
</details>
**配置说明**
1. `manifest`部分即对应`manifest.json`的配置，、；
2. `serviceWorker`对应缓存信息配置。`preload`中`posts`表示需要缓存的文章数量，`urls`表示需要缓存的页面地址，填写格式即加入缓存页面对应的目录名称，如下：
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 缓存首页</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">/</span></span><br><span class="line"><span class="comment"># 缓存标签页</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">/tags/</span></span><br></pre></td></tr></table></figure>

<h3 id="配置manifest-json实现PWA添加到桌面"><a href="#配置manifest-json实现PWA添加到桌面" class="headerlink" title="配置manifest.json实现PWA添加到桌面"></a><span id="manifest">配置<code>manifest.json</code>实现PWA添加到桌面</span></h3><p>要实现PWA必须要配置<code>manifest.json</code>，因为PWA的启动需要依赖其中的配置，当前各版本浏览器对其支持情况可参照<a href="https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Browser_compatibility_for_manifest.json" target="_blank" rel="noopener">Browser compatibility for manifest.json</a>。<br>配置<code>manifest.json</code>需要配置应用图标、名称等基本信息，在<code>../hexo/source</code>下新建<code>manifest.json</code>，基本的配置信息参照如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"short_name"</span>: <span class="string">"短名称"</span>,</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"这是一个完整名称"</span>,</span><br><span class="line">    <span class="attr">"icon"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"src"</span>: <span class="string">"icon.png"</span>,</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"image/png"</span>,</span><br><span class="line">            <span class="attr">"sizes"</span>: <span class="string">"512x512"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"background_color"</span>: <span class="string">"#2196f3"</span>,</span><br><span class="line">    <span class="attr">"display"</span>: <span class="string">"standalone"</span>,</span><br><span class="line">    <span class="attr">"start_url"</span>: <span class="string">"index.html"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>配置信息也可以在<a href="https://app-manifest.firebaseapp.com/" target="_blank" rel="noopener">Web App Manifest Generator</a>进行生成，更多详细配置可参照LAVAS<sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[manifest.json 简介](https://lavas.baidu.com/pwa/engage-retain-users/add-to-home-screen/introduction)">[3]</span></a></sup>。<br>在博客中配置引用<code>manifest.json</code>，在博客的<code>&lt;head&gt;</code>标签引入，在<code>../next/_config.yml</code>主题配置文件中开启自定义文件<code>head.swig</code>（自定义主题样式可参照另一篇博客《<a href="https://linwhitehat.github.io/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96.html">博客优化(Hexo博客Next主题自定义设计)</a>》），添加下属引用内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;link rel&#x3D;&quot;manifest&quot; href&#x3D;&quot;&#x2F;manifest.json&quot;&gt;</span><br></pre></td></tr></table></figure>
<p>博客部署完成后，可在chrome浏览的开发者模式窗口（按<code>F12</code>）查看<code>Application</code>，即可看到配置的信息以及网站缓存信息。<br><img src="/images/pwa-manifest.png" alt="查看部署结果"><i class="img-caption">☆ 查看部署结果</i></p>
<h3 id="Workbox部署"><a href="#Workbox部署" class="headerlink" title="Workbox部署"></a>Workbox部署</h3><p>当前博客实现PWA使用的方式，部署步骤如下：</p>
<ol>
<li>配置<code>manifest.json</code>，具体参照<a href="#manifest">配置manifest.json</a>。</li>
<li>安装<a href="https://nodejs.org/zh-cn/download/" target="_blank" rel="noopener">Node.js</a>（Hexo博客基于Node.js，因此跳过此步）。</li>
<li>安装插件</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install workbox-build gulp gulp-uglify readable-stream uglify-es --save-dev</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>安装<code>gulp</code>插件<br>安装<code>gulp</code>记得需要在全局环境下进行安装，不要只在博客根目录下的环境进行安装，否则会导致<code>gulp</code>无法正常执行。</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install gulp --save  <span class="comment">#安装gulp</span></span><br></pre></td></tr></table></figure>
<ol start="5">
<li>在博客站点根目录新建配置文件<code>../hexo/gulpfile.js</code>，添加内容如下：<details>
<summary>点击查看具体代码</summary>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">"gulp"</span>);</span><br><span class="line"><span class="keyword">const</span> workbox = <span class="built_in">require</span>(<span class="string">"workbox-build"</span>);</span><br><span class="line"><span class="keyword">const</span> uglifyes = <span class="built_in">require</span>(<span class="string">'uglify-es'</span>);</span><br><span class="line"><span class="keyword">const</span> composer = <span class="built_in">require</span>(<span class="string">'gulp-uglify/composer'</span>);</span><br><span class="line"><span class="keyword">const</span> uglify = composer(uglifyes, <span class="built_in">console</span>);</span><br><span class="line"><span class="keyword">const</span> pipeline = <span class="built_in">require</span>(<span class="string">'readable-stream'</span>).pipeline;</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'generate-service-worker'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> workbox.injectManifest(&#123;</span><br><span class="line">        swSrc: <span class="string">'./sw-template.js'</span>,</span><br><span class="line">        swDest: <span class="string">'./public/sw.js'</span>,</span><br><span class="line">        globDirectory: <span class="string">'./public'</span>,</span><br><span class="line">        globPatterns: [</span><br><span class="line">            <span class="string">"**/*.&#123;html,css,js,json,woff2&#125;"</span></span><br><span class="line">        ],</span><br><span class="line">        modifyURLPrefix: &#123;</span><br><span class="line">            <span class="string">""</span>: <span class="string">"./"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">"uglify"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> pipeline(</span><br><span class="line">        gulp.src(<span class="string">"./public/sw.js"</span>),</span><br><span class="line">        uglify(),</span><br><span class="line">        gulp.dest(<span class="string">"./public"</span>)</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">"build"</span>, gulp.series(<span class="string">"generate-service-worker"</span>, <span class="string">"uglify"</span>));</span><br></pre></td></tr></table></figure>
</details></li>
</ol>
<p><strong>配置说明</strong><br>1）<code>globPatterns</code>表示需要缓存的文件匹配模式，这里将<code>html</code>、<code>css</code>、<code>js</code>、<code>json</code>和<code>woff2</code>类型文件进行缓存，当博客首次加载时会自动缓存这些文件；<br>2）若是博客使用<code>gulp</code>压缩了源码，以上配置内容与之前配置信息重复的部分可忽略。<br>6. 在博客站点根目录新建配置文件<code>../hexo/sw-template.js</code>，添加内容如下：</p>
<details>
<summary>点击查看具体代码</summary>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> workboxVersion = <span class="string">'5.0.0'</span>;</span><br><span class="line"></span><br><span class="line">importScripts(<span class="string">`https://storage.googleapis.com/workbox-cdn/releases/<span class="subst">$&#123;workboxVersion&#125;</span>/workbox-sw.js`</span>);</span><br><span class="line"></span><br><span class="line">workbox.core.setCacheNameDetails(&#123;</span><br><span class="line">    prefix: <span class="string">"Blog_name"</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">workbox.core.skipWaiting();</span><br><span class="line"></span><br><span class="line">workbox.core.clientsClaim();</span><br><span class="line"></span><br><span class="line">workbox.precaching.precacheAndRoute(self.__WB_MANIFEST);</span><br><span class="line"></span><br><span class="line">workbox.precaching.cleanupOutdatedCaches();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Images</span></span><br><span class="line">workbox.routing.registerRoute(</span><br><span class="line">    /\.(?:png|jpg|jpeg|gif|bmp|webp|svg|ico)$/,</span><br><span class="line">    <span class="keyword">new</span> workbox.strategies.CacheFirst(&#123;</span><br><span class="line">        cacheName: <span class="string">"images"</span>,</span><br><span class="line">        plugins: [</span><br><span class="line">            <span class="keyword">new</span> workbox.expiration.ExpirationPlugin(&#123;</span><br><span class="line">                maxEntries: <span class="number">1000</span>,</span><br><span class="line">                maxAgeSeconds: <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">30</span></span><br><span class="line">            &#125;),</span><br><span class="line">            <span class="keyword">new</span> workbox.cacheableResponse.CacheableResponsePlugin(&#123;</span><br><span class="line">                statuses: [<span class="number">0</span>, <span class="number">200</span>]</span><br><span class="line">            &#125;)</span><br><span class="line">        ]</span><br><span class="line">    &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Fonts</span></span><br><span class="line">workbox.routing.registerRoute(</span><br><span class="line">    /\.(?:eot|ttf|woff|woff2)$/,</span><br><span class="line">    <span class="keyword">new</span> workbox.strategies.CacheFirst(&#123;</span><br><span class="line">        cacheName: <span class="string">"fonts"</span>,</span><br><span class="line">        plugins: [</span><br><span class="line">            <span class="keyword">new</span> workbox.expiration.ExpirationPlugin(&#123;</span><br><span class="line">                maxEntries: <span class="number">1000</span>,</span><br><span class="line">                maxAgeSeconds: <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">30</span></span><br><span class="line">            &#125;),</span><br><span class="line">            <span class="keyword">new</span> workbox.cacheableResponse.CacheableResponsePlugin(&#123;</span><br><span class="line">                statuses: [<span class="number">0</span>, <span class="number">200</span>]</span><br><span class="line">            &#125;)</span><br><span class="line">        ]</span><br><span class="line">    &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Google Fonts</span></span><br><span class="line">workbox.routing.registerRoute(</span><br><span class="line">    /^https:\/\/fonts\.googleapis\.com/,</span><br><span class="line">    <span class="keyword">new</span> workbox.strategies.StaleWhileRevalidate(&#123;</span><br><span class="line">        cacheName: <span class="string">"google-fonts-stylesheets"</span></span><br><span class="line">    &#125;)</span><br><span class="line">);</span><br><span class="line">workbox.routing.registerRoute(</span><br><span class="line">    /^https:\/\/fonts\.gstatic\.com/,</span><br><span class="line">    <span class="keyword">new</span> workbox.strategies.CacheFirst(&#123;</span><br><span class="line">        cacheName: <span class="string">'google-fonts-webfonts'</span>,</span><br><span class="line">        plugins: [</span><br><span class="line">            <span class="keyword">new</span> workbox.expiration.ExpirationPlugin(&#123;</span><br><span class="line">                maxEntries: <span class="number">1000</span>,</span><br><span class="line">                maxAgeSeconds: <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">30</span></span><br><span class="line">            &#125;),</span><br><span class="line">            <span class="keyword">new</span> workbox.cacheableResponse.CacheableResponsePlugin(&#123;</span><br><span class="line">                statuses: [<span class="number">0</span>, <span class="number">200</span>]</span><br><span class="line">            &#125;)</span><br><span class="line">        ]</span><br><span class="line">    &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Static Libraries</span></span><br><span class="line">workbox.routing.registerRoute(</span><br><span class="line">    /^https:\/\/cdn\.jsdelivr\.net/,</span><br><span class="line">    <span class="keyword">new</span> workbox.strategies.CacheFirst(&#123;</span><br><span class="line">        cacheName: <span class="string">"static-libs"</span>,</span><br><span class="line">        plugins: [</span><br><span class="line">            <span class="keyword">new</span> workbox.expiration.ExpirationPlugin(&#123;</span><br><span class="line">                maxEntries: <span class="number">1000</span>,</span><br><span class="line">                maxAgeSeconds: <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">30</span></span><br><span class="line">            &#125;),</span><br><span class="line">            <span class="keyword">new</span> workbox.cacheableResponse.CacheableResponsePlugin(&#123;</span><br><span class="line">                statuses: [<span class="number">0</span>, <span class="number">200</span>]</span><br><span class="line">            &#125;)</span><br><span class="line">        ]</span><br><span class="line">    &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// External Images</span></span><br><span class="line">workbox.routing.registerRoute(</span><br><span class="line">    /^https:\/\/raw\.githubusercontent\.com\/reuixiy\/hugo-theme-meme\/master\/<span class="keyword">static</span>\/icons\/.*<span class="regexp">/,</span></span><br><span class="line"><span class="regexp">    new workbox.strategies.CacheFirst(&#123;</span></span><br><span class="line"><span class="regexp">        cacheName: "external-images",</span></span><br><span class="line"><span class="regexp">        plugins: [</span></span><br><span class="line"><span class="regexp">            new workbox.expiration.ExpirationPlugin(&#123;</span></span><br><span class="line"><span class="regexp">                maxEntries: 1000,</span></span><br><span class="line"><span class="regexp">                maxAgeSeconds: 60 * 60 * 24 * 30</span></span><br><span class="line"><span class="regexp">            &#125;),</span></span><br><span class="line"><span class="regexp">            new workbox.cacheableResponse.CacheableResponsePlugin(&#123;</span></span><br><span class="line"><span class="regexp">                statuses: [0, 200]</span></span><br><span class="line"><span class="regexp">            &#125;)</span></span><br><span class="line"><span class="regexp">        ]</span></span><br><span class="line"><span class="regexp">    &#125;)</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">workbox.googleAnalytics.initialize();</span></span><br></pre></td></tr></table></figure>
</details>
**配置说明**
1）`prefix`参数内容`Blog_name`修改为博客名称，具体参照[Workbox_v5.0.0](https://github.com/GoogleChrome/workbox/releases)；
2）将参数`workboxVersion`修改为最新发布版，其他内容可根据自身情况修改；
3）其他缓存策略参考[相关文档](https://developers.google.com/web/tools/workbox/modules/workbox-strategies)，不建议缓存视频和图片。
7. 注册`Service Worker`

<p>在博客HTML页面加入<code>Service Worker</code>注册信息及页面更新提醒，在<code>../next/layout/_layout.swig</code>中找到<code>&lt;body&gt;&lt;/body&gt;</code>标签对，在标签内加入以下内容：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"app-refresh"</span> id=<span class="string">"app-refresh"</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"app-refresh-wrap"</span> onclick=<span class="string">"location.reload()"</span>&gt;</span><br><span class="line">        &lt;label&gt;已更新最新版本&lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">        &lt;span&gt;点击刷新&lt;/</span>span&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">'serviceWorker'</span> <span class="keyword">in</span> navigator) &#123;</span><br><span class="line">        <span class="keyword">if</span> (navigator.serviceWorker.controller) &#123;</span><br><span class="line">            navigator.serviceWorker.addEventListener(<span class="string">'controllerchange'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                showNotification();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">window</span>.addEventListener(<span class="string">'load'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            navigator.serviceWorker.register(<span class="string">'/sw.js'</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">showNotification</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">document</span>.querySelector(<span class="string">'meta[name=theme-color]'</span>).content = <span class="string">'#000'</span>;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">'app-refresh'</span>).className += <span class="string">' app-refresh-show'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="8">
<li>添加CSS样式</li>
</ol>
<p>在自定义样式文件<code>../hexo/source/_data/styles.styl</code>中修改，添加以下内容：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.app-refresh</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">3em</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">42</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">transition</span>: all .<span class="number">3s</span> ease;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.app-refresh-wrap</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.app-refresh-wrap</span> <span class="selector-tag">label</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.app-refresh-show</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">3em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="9">
<li>避免<code>manifest.json</code>在部署时被修改</li>
</ol>
<p>在博客配置文件<code>../hexo/_config.yml</code>找到<code>skip_render</code>，做出以下修改：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">+</span> <span class="attr">skip_render:</span> <span class="string">[README.md,manifest.json]</span></span><br></pre></td></tr></table></figure>
<ol start="10">
<li>部署</li>
</ol>
<p>运行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">gulp build</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>这篇博客是Hexo博客优化系列的补充，为博客部署PWA，使博客在多平台能快捷访问且支持离线访问，同时在部署过程中将遇到的问题及解决方式进行分享，同时感谢博主<code>Guan Qirui</code>在博客优化中给予的帮助。</p>
<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://developer.mozilla.org/zh-CN/docs/Web/Progressive_web_apps" target="_blank" rel="noopener">渐进式 Web 应用（PWA）|MDN web docs</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://guanqr.com/study/blog/realize-pwa/" target="_blank" rel="noopener">博客实现PWA</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://lavas.baidu.com/pwa/engage-retain-users/add-to-home-screen/introduction" target="_blank" rel="noopener">manifest.json 简介</a><a href="#fnref:3" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>技术分享</category>
        <category>博客</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>PWA</tag>
        <tag>gulp</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows查看Wi-Fi密码</title>
    <url>/%E6%9F%A5%E7%9C%8B%E6%97%A0%E7%BA%BF%E5%AF%86%E7%A0%81.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>平时我们使用手机、平板和笔记本电脑时会连接很多无线网络即Wi-Fi，当第一次认证完成连接上无线网之后，系统默认会记录存储认证信息为之后连接使用带来便利，但是当我们想要查看无线网密码或分享时，往往需要谷歌一下怎么查看已存的无线网信息，而这个其实十分简单，在这里也做个记录。</p>
<a id="more"></a>

<h2 id="打开网络适配器设置"><a href="#打开网络适配器设置" class="headerlink" title="打开网络适配器设置"></a>打开网络适配器设置</h2><h3 id="命令行开启"><a href="#命令行开启" class="headerlink" title="命令行开启"></a>命令行开启</h3><p>按快捷组合键<code>Windwos+r</code>，输入<code>ncpa.cpl</code>。</p>
<h3 id="界面鼠标开启"><a href="#界面鼠标开启" class="headerlink" title="界面鼠标开启"></a>界面鼠标开启</h3><p>鼠标右键点击Windows菜单栏的网络图标，点击<code>打开“网络和Internet”设置</code>，选择<code>更改适配器选项</code>。</p>
<p><img src="/images/wifi-1.png" alt="网络适配器"><i class="img-caption">☆ 网络适配器</i></p>
<h2 id="查看无线网配置信息"><a href="#查看无线网配置信息" class="headerlink" title="查看无线网配置信息"></a>查看无线网配置信息</h2><h3 id="无线网状态"><a href="#无线网状态" class="headerlink" title="无线网状态"></a>无线网状态</h3><p>右键点击<code>WLAN</code>标记的网络，点击<code>状态</code>。</p>
<p><img src="/images/wifi-2.png" alt="无线状态查看"><i class="img-caption">☆ 无线状态查看</i></p>
<h3 id="查看无线属性"><a href="#查看无线属性" class="headerlink" title="查看无线属性"></a>查看无线属性</h3><p>进入无线网状态界面，点击<code>无线属性</code>,选择<code>安全</code>选项卡，勾选<code>显示字符</code>即可查看当前无线网的认证信息。</p>
<p><img src="/images/wifi-3.png" alt="无线属性查看"><i class="img-caption">☆ 无线属性查看</i></p>
<p><img src="/images/wifi-4.png" alt="Wi-Fi密钥查看"><i class="img-caption">☆ Wi-Fi密钥查看</i></p>
<h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>本文是Windows环境下常见的需求记录，便于所需时可即时查找。</p>
]]></content>
      <categories>
        <category>Handbook</category>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>wifi</tag>
      </tags>
  </entry>
  <entry>
    <title>博客优化(Hexo博客Next主题自定义设计)</title>
    <url>/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>博客搭建完成后，最初的博客雏形一般都比较朴素，功能也有限，所以可以通过优化主题来进行美化博客外观和拓展博客功能。本篇文章主要以可正常访问的Hexo.Mist原型博客为基础，根据自身需求加以优化，而最新版（V7.7）中其实包含很多美化设置，但是默认是关闭状态，同时个性化配置需要修改配置文件等，即使出现一个字母的差错也会导致失效，因此本文对配置文件会具体说明，而目录均是按照我的博客搭建博文中说明的目录结构，可以根据自身目录结构进行转换，博文中展示的图片可能来自参考文章，若参考文章内容与实际存在差异会附上实际图片。</p>
<a id="more"></a>

<h2 id="优化主题"><a href="#优化主题" class="headerlink" title="优化主题"></a>优化主题</h2><p>我的个人博客是<a href="https://linwhitehat.github.io/">林深时见璐</a>，本文优化的效果可以访问博客进行观看。</p>
<h3 id="阅读全文设置"><a href="#阅读全文设置" class="headerlink" title="阅读全文设置"></a>阅读全文设置</h3><p>由于初始博客并没有设置摘要的形式，因此博客首页会展示每篇博文的全文，显得十分冗长，为此设置<code>阅读全文</code>能简化博客首页，且让博文能以简短的摘要进行展示。<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[设置阅读全文](https://www.jianshu.com/p/78c218f9d1e7)
">[1]</span></a></sup></p>
<p>设置方法采用的是在博文中选择适当位置进行内容截断，填写以下内容：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- more --&gt;</span></span><br></pre></td></tr></table></figure>

<p>这样首页便只会展示在截断位置前的内容。</p>
<h3 id="分类板块二级目录显示"><a href="#分类板块二级目录显示" class="headerlink" title="分类板块二级目录显示"></a><code>分类板块</code>二级目录显示</h3><p>在类别模块，往往只显示一种类别，但有时候博客之间归属一大类却各有差异，因此设计二级分类目录，使得类别简洁的同时又能将具体博文区别。因为Hexo原生支持父子分类，在博文撰写的<code>md</code>文件首部<code>categories</code>下原先的类别A下再写一个类别B，即可得到父子类的效果，A为父类，B为子类，示例如下<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[分类二级目录](https://hexo.io/zh-cn/docs/front-matter.html)
">[2]</span></a></sup>：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">categories:</span><br><span class="line"><span class="deletion">- 技术</span></span><br><span class="line"><span class="deletion">- 博客搭建</span></span><br></pre></td></tr></table></figure>

<h3 id="评论系统使用utteranc"><a href="#评论系统使用utteranc" class="headerlink" title="评论系统使用utteranc"></a>评论系统使用<code>utteranc</code></h3><p>原先使用的是主题自带的<code>gitalk</code>作为博客评论系统，而更改为<code>utteranc</code>的原因有两个：<br>1）<code>gitalk</code>存在原始配置泄露及访问授权等<a href="https://github.com/gitalk/gitalk/issues/343" target="_blank" rel="noopener" title="https://github.com/gitalk/gitalk/issues/343">问题</a>，<code>utteranc</code>具备细粒度的权限控制，且接受隐私项目授权；<br>2）二者都是基于GitHub的issue系统进行评论，很好转换。</p>
<p>转换评论系统首先将<code>gitalk</code>在<code>../next/_config.yml</code>中设置为<code>false</code>，将GitHub中授权的应用删除。安装<code>utteranc</code>步骤如下<sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[评论系统](https://wangjiezhe.com/posts/2018-10-29-Hexo-NexT-3/)
">[3]</span></a></sup>：<br>1）在GitHub APP中安装<code>utterances</code>，链接为<a href="https://github.com/apps/utterances" target="_blank" rel="noopener">https://github.com/apps/utterances</a>，安装后如图：<br><img src="https://wangjiezhe.com/posts/2018-10-29-Hexo-NexT-3/5bd723ae73cb3.webp" alt="utterance应用安装"><i class="img-caption">☆ utterance应用安装</i><br>2）安装插件，在hexo文件目录下打开<code>git bash</code>，安装如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install theme-next/hexo-next-utteranc</span><br></pre></td></tr></table></figure>
<p>3）在<code>../next/layout/_third-party/comments/</code>中新建文件<code>utterances.swig</code>，写入以下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% if theme.utteranc.enable %&#125;</span><br><span class="line">  &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;utteranc.es&#x2F;client.js&quot;</span><br><span class="line">    repo&#x3D;&quot;&#123;&#123; theme.utteranc.repo &#125;&#125;&quot;</span><br><span class="line">    issue-term&#x3D;&quot;&#123;&#123; theme.utteranc.issue_term &#125;&#125;&quot;</span><br><span class="line">    theme&#x3D;&quot;&#123;&#123; theme.utteranc.theme &#125;&#125;&quot;</span><br><span class="line">    crossorigin&#x3D;&quot;anonymous&quot;</span><br><span class="line">    async&gt;</span><br><span class="line">  &lt;&#x2F;script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>
<p>4）在<code>../next/layout/_partials/comments.swig</code>中找到最后一句<code>elseif</code>并在其中的<code>&lt;div&gt;&lt;/div&gt;</code>后面增添以下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% elseif theme.utteranc.enable %&#125;</span><br><span class="line">      &lt;div class&#x3D;&quot;comments&quot; id&#x3D;&quot;comments&quot;&gt;</span><br><span class="line">        &#123;% include &#39;..&#x2F;_third-party&#x2F;comments&#x2F;utterances.swig&#39; %&#125;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>
<p>5）在<code>../next/_config.yml</code>添加下面的配置内容：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Demo: https://utteranc.es/  http://trumandu.github.io/about/</span></span><br><span class="line"><span class="attr">utteranc:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">linwhitehat/linwhitehat.github.io</span></span><br><span class="line">  <span class="attr">pathname:</span> <span class="string">pathname</span></span><br><span class="line">  <span class="comment"># theme: github-light,github-dark,github-dark-orange</span></span><br><span class="line">  <span class="attr">theme:</span> <span class="string">github-light</span></span><br><span class="line">  <span class="attr">cdn:</span> <span class="string">https://utteranc.es/client.js</span></span><br><span class="line">  <span class="comment"># If you want to modify priority, please config in **hexo**</span></span><br><span class="line">  <span class="comment">#priority:</span></span><br></pre></td></tr></table></figure>
<p>更新完博客配置后，便能看到之前使用gitalk留下的评论，同时也能发表新评论。</p>
<h3 id="图片设置"><a href="#图片设置" class="headerlink" title="图片设置"></a>图片设置</h3><ol>
<li>图片放大查看的功能，这是默认功能，可以选择使用的插件<code>fancybox</code>或<code>mediumzoom</code>，我使用后者，在<code>../next/_config.yml</code>中搜索<code>mediumzoom</code>，将<code>false</code>改为<code>true</code>。</li>
<li>图片标题说明，当前的配置情况下，即使使用下面展示的markdown语法中的图片说明也无法正常显示在博客中，其中<code>Optional title</code>是图片的title属性，若使用Next主题中的<code>fancybox</code>插件则自动会显示，其他的配置则需要更改Hexo渲染组件。<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">Alt text</span>](<span class="link">../img.jpg "Optional title"</span>)</span><br></pre></td></tr></table></figure>
修改渲染配置步骤如下：<br>1）在<code>../hexo/node_modules/marked/lib/marked.js</code>中进行下述修改，其中<code>-</code>表示删除<code>+</code>表示增加：<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">Renderer.prototype.image = function(href, title, text) &#123;</span><br><span class="line"><span class="deletion">- href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);</span></span><br><span class="line"><span class="deletion">- if (href === null) &#123;</span></span><br><span class="line"><span class="deletion">-   return text;</span></span><br><span class="line"><span class="deletion">-&#125;</span></span><br><span class="line"><span class="addition">+ if (this.options.baseUrl &amp;&amp; !originIndependentUrl.test(href)) &#123;</span></span><br><span class="line"><span class="addition">+   href = resolveUrl(this.options.baseUrl, href);</span></span><br><span class="line"><span class="addition">+ &#125;</span></span><br><span class="line"><span class="addition">+ var out = '&lt;img src="' + href + '" alt="' + text + '"';</span></span><br><span class="line">  if (title) &#123;</span><br><span class="line"><span class="deletion">-   out += ' title="' + title + '"';</span></span><br><span class="line"><span class="addition">+   out += '&gt;' + '&lt;i class="img-caption"&gt;' + '◎ ' + title + '&lt;/i';</span></span><br><span class="line">  &#125;</span><br><span class="line">  out += this.options.xhtml ? '/&gt;' : '&gt;';</span><br><span class="line">  return out;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
2）增加自定义CSS样式，在<code>../source/_data/styles.styl</code>中增加以下内容：<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.img-caption</span> &#123;</span><br><span class="line">    <span class="attribute">font-style</span>: normal;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0</span> .<span class="number">7em</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">90%</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#555</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">text-indent</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">font-family</span>: STKaiti, serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>图片居中<sup id="fnref:4"><a href="#fn:4" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[图片居中设置](https://blog.singee.me/2017/12/07/mist-img-center/)
">[4]</span></a></sup></li>
</ol>
<p>在<code>../next/source/css/_schemes/Mist/_posts-expanded.styl</code>中找到<code>.posts-expand</code>中的下列内容：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.post-body</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>将其修改为：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.post-body</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h3 id="博文脚注"><a href="#博文脚注" class="headerlink" title="博文脚注"></a>博文脚注</h3><p>脚注也可以叫注脚，Hexo自带的默认markdown编辑器渲染效果不支持脚注的显示，因此安装插件进行渲染支持，我使用的是<a href="https://github.com/kchen0x/hexo-reference" target="_blank" rel="noopener" title="https://github.com/kchen0x/hexo-reference">hexo-reference</a>，整体效果更可观，安装如下<sup id="fnref:5"><a href="#fn:5" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[插入脚注](https://guanqr.com/study/blog/hexo-theme-next-customization/)
">[5]</span></a></sup><sup id="fnref:6"><a href="#fn:6" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[注脚选择](https://benzblog.site/2019-07-12-HexoTricks/)
">[6]</span></a></sup>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-reference --save</span><br></pre></td></tr></table></figure>
<p>在博客撰写的md文件中使用如下（<code>^</code>和数字之间不需要空格）：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">博客脚注[^ 1]。</span><br><span class="line">[<span class="symbol">^ 1</span>]: <span class="link">我的博客。</span></span><br></pre></td></tr></table></figure>

<h3 id="修改篇尾的标签符号"><a href="#修改篇尾的标签符号" class="headerlink" title="修改篇尾的标签符号"></a>修改篇尾的标签符号</h3><p>默认的标签符号是<code>#</code>，可以使用自带的标签图案，修改方式即在<code>../next/_config.yml</code>中将<code>tag_icon</code>更改为<code>true</code>。<br><img src="https://i.imgur.com/LVHYdOp.png" alt="old_tag"><i class="img-caption">☆ old_tag</i><br><img src="https://i.imgur.com/KVFYpSF.png" alt="new_tag"><i class="img-caption">☆ new_tag</i></p>
<h3 id="修改分割线"><a href="#修改分割线" class="headerlink" title="修改分割线"></a>修改分割线</h3><p>原先的默认分割线是虚线，将其修改为实线，在<code>../next/source/css/_common/scaffolding/base.styl</code>中将下属配置删除<sup id="fnref:7"><a href="#fn:7" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[分割线样式修改](https://blog.bill.moe/hexo-theme-next-config-optimization/)
">[7]</span></a></sup>：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">background-image</span>: <span class="selector-tag">repeating-linear-gradient</span>(<span class="selector-tag">-45deg</span>, <span class="selector-tag">white</span>, <span class="selector-tag">white</span> 4<span class="selector-tag">px</span>, <span class="selector-tag">transparent</span> 4<span class="selector-tag">px</span>, <span class="selector-tag">transparent</span> 8<span class="selector-tag">px</span>);</span><br></pre></td></tr></table></figure>

<h3 id="页脚显示博客运行时间"><a href="#页脚显示博客运行时间" class="headerlink" title="页脚显示博客运行时间"></a>页脚显示博客运行时间</h3><p>在博客页脚显示博客运行时间<sup id="fnref:8"><a href="#fn:8" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[页脚显示博客运行时间](http://eternalzttz.com/hexo-next.html)
">[8]</span></a></sup>，这个在默认主题配置中并没有，因此需要自己添加，修改配置文件是<code>../next/layout/_partials/footer.swig</code>，在配置文件中找到你想显示在博客页脚的位置，比如我配置在主题版本信息下，显示效果如图：<br><img src="/images/run_time_result.png" alt="博客运行时间"><i class="img-caption">☆ 博客运行时间显示效果</i><br>不同配置位置可以自行尝试修改，具体添加代码如下：</p>
<details>
<summary>点击查看具体代码</summary>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;days&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">function show_date_time()&#123;</span><br><span class="line">    window.setTimeout(&quot;show_date_time()&quot;, 1000);</span><br><span class="line">    BirthDay&#x3D;new Date(&quot;01&#x2F;10&#x2F;2019 00:13:14&quot;);&#x2F;&#x2F;修改为自己的blog建站时间</span><br><span class="line">    today&#x3D;new Date();</span><br><span class="line">    timeold&#x3D;(today.getTime()-BirthDay.getTime());</span><br><span class="line">    sectimeold&#x3D;timeold&#x2F;1000</span><br><span class="line">    secondsold&#x3D;Math.floor(sectimeold);</span><br><span class="line">    msPerDay&#x3D;24*60*60*1000</span><br><span class="line">    e_daysold&#x3D;timeold&#x2F;msPerDay</span><br><span class="line">    daysold&#x3D;Math.floor(e_daysold);</span><br><span class="line">    e_hrsold&#x3D;(e_daysold-daysold)*24;</span><br><span class="line">    hrsold&#x3D;setzero(Math.floor(e_hrsold));</span><br><span class="line">    e_minsold&#x3D;(e_hrsold-hrsold)*60;</span><br><span class="line">    minsold&#x3D;setzero(Math.floor((e_hrsold-hrsold)*60));</span><br><span class="line">    seconds&#x3D;setzero(Math.floor((e_minsold-minsold)*60));</span><br><span class="line">    document.getElementById(&#39;days&#39;).innerHTML&#x3D;&quot;本站已安全运行&quot;+daysold+&quot;天&quot;+hrsold+&quot;小时&quot;+minsold+&quot;分&quot;+seconds+&quot;秒&quot;;</span><br><span class="line">&#125;</span><br><span class="line">function setzero(i)&#123;</span><br><span class="line">    if (i&lt;10)</span><br><span class="line">    &#123;i&#x3D;&quot;0&quot; + i&#125;;</span><br><span class="line">    return i;</span><br><span class="line">&#125;</span><br><span class="line">show_date_time();</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="显示博客阅读数量"><a href="#显示博客阅读数量" class="headerlink" title="显示博客阅读数量"></a>显示博客阅读数量</h3><p>已经有许多教程，在博客主题配置中也有多种选择，根据网上教程的介绍，busuanzi插件只能在博文显示阅读数，因此我选择部署LeanCloud插件来显示阅读数，但是在部署过程中遇到不少问题，而且没有在任何教程中找到完整的说明，尽管网上也有可行的教程<sup id="fnref:9"><a href="#fn:9" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[部署LeanCloud显示阅读数量](https://yunhao.space/2018/06/27/hexo-leancloud-plugin-installation-tutor/)
">[9]</span></a></sup>，我还是记录下来。</p>
<h4 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h4><p>在<a href="https://www.leancloud.cn/" target="_blank" rel="noopener">LeanCloud</a>官网中进行注册并登录。</p>
<h4 id="应用配置"><a href="#应用配置" class="headerlink" title="应用配置"></a>应用配置</h4><p>进入控制台之后，点击<code>创建应用</code>，填写应用名称，<code>计价方案</code>选择开发版，创建成功之后，在对应应用右上角点击齿轮状的设置，如图：<br><img src="https://raw.githubusercontent.com/lmnsyunhao/blog-pica/master/hexo-leancloud-plugin-installation-tutor/3.png" alt="LeanCloud应用设置"><i class="img-caption">☆ LeanCloud应用设置</i><br>在设置界面，选择<code>存储</code>，选择<code>创建Class</code>，<code>Class名称</code>输入<code>Counter</code>，因为这个类名与Next主题兼容，默认ACL权限设置为<code>无限制</code>即所有用户可读可写。<br>在设置界面，选择<code>设置</code>，选择<code>应用Keys</code>，将界面显示的<code>AppID</code>和<code>AppKey</code>复制，在主题配置文件修改时需要使用。<br>在上述的<code>设置</code>选项下选择<code>安全中心</code>，在<code>Web安全域名</code>的填写框中输入博客的完整域名，保证统计数据只在记录的域名中有效。</p>
<h4 id="博客配置"><a href="#博客配置" class="headerlink" title="博客配置"></a>博客配置</h4><p>在博客的<code>../next/_config.yml</code>配置文件中，找到<code>leancloud_visitors</code>，设置配置信息如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Show number of visitors to each article.</span></span><br><span class="line"><span class="comment"># You can visit https://leancloud.cn get AppID and AppKey.</span></span><br><span class="line"><span class="attr">leancloud_visitors:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">app_id:</span> </span><br><span class="line">  <span class="attr">app_key:</span> </span><br><span class="line">  <span class="comment"># Dependencies: https://github.com/theme-next/hexo-leancloud-counter-security</span></span><br><span class="line">  <span class="comment"># If you don't care about security in lc counter and just want to use it directly</span></span><br><span class="line">  <span class="comment"># (without hexo-leancloud-counter-security plugin), set the `security` to `false`.</span></span><br><span class="line">  <span class="attr">security:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">betterPerformance:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p><code>app_id</code>处填写应用配置时复制的<code>AppID</code>，<code>app_key</code>填写应用配置时复制的<code>AppKey</code>。</p>
<h4 id="安全插件安装及部署"><a href="#安全插件安装及部署" class="headerlink" title="安全插件安装及部署"></a>安全插件安装及部署</h4><p>如果上述配置完成后，更新部署博客，能够正常显示阅读数量，后续的内容可以选择跳过。<br>如果上述配置不能正常显示阅读数量，且存在<code>Counter not initialized! See more at console err msg.</code>的问题，此时在博客页面打开控制台（Chrome下按<code>F12</code>或右键选择<code>检查</code>），点击<code>Console</code>查看是否存在下图显示内容：<br><img src="https://raw.githubusercontent.com/lmnsyunhao/blog-pica/master/hexo-leancloud-plugin-installation-tutor/8.png" alt="Count类未初始化问题"><i class="img-caption">☆ Count类未初始化问题</i><br>这是因为LeanCloud插件存在安全问题，需要安装另一个插件<code>hexo-leancloud-counter-security</code>进行完善。<br>首先在<code>../next/_config.yml</code>主题配置文件中的<code>leancloud_visitors</code>找到<code>security</code>选项，将其改为<code>true</code>，同时确认同一配置文件下的<code>valine</code>部分的<code>enable</code>和<code>visitor</code>是<code>false</code>，因为这两者会产生冲突，如果使用<code>valine</code>作为评论系统，可以参照网上教程进行冲突解决。<br>然后在博客根目录下打开<code>git bash</code>或<code>CMD</code>，安装插件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-leancloud-counter-security --save</span><br></pre></td></tr></table></figure>
<p>由于插件存在依赖性，出现<code>Error: Cannot find module &#39;babel-runtime/regenerator&#39;</code>错误时需要再安装模块<code>babel-runtime</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install babel-runtime --save</span><br></pre></td></tr></table></figure>
<p>安装完成之后，注册用户，其中<code>用户名</code>和<code>密码</code>替换为你要设置的用户名和密码内容（不需要和LeanCloud的登陆名和登陆密码一样）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo lc-counter r 用户名 密码</span><br></pre></td></tr></table></figure>
<p>之后修改博客配置文件<code>../hexo/_config.yml</code>，添加以下内容（所有选项都必须填写，此处的<code>username</code>和<code>password</code>即刚刚注册的用户名和密码，网上有教程认为此处空白可等部署时输入，但我部署时会因为配置缺少导致出错，所以建议配置中直接写入），否则部署时会报错<code>TypeError: Cannot read property ‘enable_sync’ of undefined</code>：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">leancloud_counter_security:</span></span><br><span class="line">  <span class="attr">enable_sync:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">app_id:</span> <span class="string">&lt;&lt;your</span> <span class="string">app</span> <span class="string">id&gt;&gt;</span></span><br><span class="line">  <span class="attr">app_key:</span> <span class="string">&lt;&lt;your</span> <span class="string">app</span> <span class="string">key&gt;</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">&lt;&lt;your</span> <span class="string">username&gt;&gt;</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">&lt;&lt;your</span> <span class="string">password&gt;&gt;</span></span><br></pre></td></tr></table></figure>
<p>之后在同一配置文件下的<code>deploy</code>部分，做以下修改：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="bullet">-</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/username/username.github.io</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line"><span class="bullet">-</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">leancloud_counter_security_sync</span></span><br></pre></td></tr></table></figure>
<p>由于搭建博客时已经部署到GitHub，要同时部署git和leancloud需要在配置文件中写清楚，其中git部分的<code>username</code>是对应博客的GitHub用户名，可参照我的博客<a href="https://linwhitehat.github.io/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2.html">搭建个人博客(hexo+next+github）</a>中的说明。<br>完成插件安装和配置修改后，到LeanCloud的应用中查看<code>存储</code>下的<code>_User</code>项，是否已经添加刚刚注册的用户，如图：<br><img src="https://raw.githubusercontent.com/lmnsyunhao/blog-pica/master/hexo-leancloud-plugin-installation-tutor/9.png" alt="LeanCloud用户查看"><i class="img-caption">☆ LeanCloud用户查看</i><br>存在用户后，查看<code>Counter</code>项，对表权限进行修改，点击<code>Counter</code>，选择<code>权限</code>，点击<code>修改</code>，分别修改<code>add_fields</code>、<code>create</code>和<code>delete</code>。<br><img src="/images/LeanCloud_Counter.png" alt="Counter权限修改"><i class="img-caption">☆ Counter权限修改</i><br><code>add_fields</code>和<code>create</code>两项的修改步骤一致：<br>1）选择<code>指定用户</code><br>2）输入已注册的用户名，添加<br><img src="https://raw.githubusercontent.com/lmnsyunhao/blog-pica/master/hexo-leancloud-plugin-installation-tutor/11.png" alt="添加用户"><i class="img-caption">☆ 添加用户</i><br>3）查看已添加用户正常显示<br><img src="https://raw.githubusercontent.com/lmnsyunhao/blog-pica/master/hexo-leancloud-plugin-installation-tutor/12.png" alt="用户添加成功效果"><i class="img-caption">☆ 用户添加成功效果</i><br>对于<code>delete</code>项，只保留上述第一个步骤即可，不需要添加用户。<br>如果希望保护访问数据不被篡改，可以选择<code>云引擎</code>，选择<code>部署</code>，选择<code>在线编辑</code>，点击<code>创建函数</code>，选项依次选择<code>Hook</code>、<code>beforeUpdate</code>和<code>Counter</code>，在函数中添加以下内容：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> query = <span class="keyword">new</span> AV.Query(<span class="string">"Counter"</span>);</span><br><span class="line"><span class="keyword">if</span> (request.object.updatedKeys.indexOf(<span class="string">'time'</span>) !== <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> query.get(request.object.id).then(<span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (obj.get(<span class="string">"time"</span>) + <span class="number">1</span> !== request.object.get(<span class="string">"time"</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AV.Cloud.Error(<span class="string">'Invalid update!'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/lmnsyunhao/blog-pica/master/hexo-leancloud-plugin-installation-tutor/18.png" alt="云引擎设置内容"><i class="img-caption">☆ 云引擎设置内容</i><br>保存上述设置之后，可看到添加的函数，点击<code>部署</code>，等待部署完成即可。<br><img src="https://raw.githubusercontent.com/lmnsyunhao/blog-pica/master/hexo-leancloud-plugin-installation-tutor/21.png" alt="部署完成日志"><i class="img-caption">☆ 部署完成日志</i></p>
<h4 id="修改lean-analytics-swig配置"><a href="#修改lean-analytics-swig配置" class="headerlink" title="修改lean-analytics.swig配置"></a>修改lean-analytics.swig配置</h4><p>如果上述配置完成后正常显示阅读数可跳过这部分，若出现阅读数不正常且显示为0，可参照此部分<sup id="fnref:10"><a href="#fn:10" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Next主题无法获取Leancloud阅读次数的问题](https://wangyi.blog/2019/12/24/Next主题无法获取Leancloud阅读次数的问题/)
">[10]</span></a></sup>，原因可能是LeanCloud接口出现变化。对<code>..\next\layout_third-party\statistics\lean-analytics.swig</code>做以下修改：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"># 修改第13行，-表示删除，+表示添加</span><br><span class="line"><span class="deletion">- Counter('get', `/classes/Counter?where=$&#123;JSON.stringify(&#123; url &#125;)&#125;`)</span></span><br><span class="line"><span class="addition">+ Counter('get', `/classes/Counter?where=$&#123;encodeURIComponent(JSON.stringify(&#123; url &#125;))&#125;&amp;limit=1`)</span></span><br><span class="line"></span><br><span class="line"># 修改第58行</span><br><span class="line"><span class="deletion">- Counter('get', `/classes/Counter?where=$&#123;JSON.stringify(&#123; url: &#123; '$in': entries &#125; &#125;)&#125;`)</span></span><br><span class="line"><span class="addition">+ Counter('get', `?where=$&#123;encodeURIComponent(JSON.stringify(&#123; url: &#123; '$in': entries &#125; &#125;))&#125;`)</span></span><br></pre></td></tr></table></figure>

<h3 id="设置中文缩进"><a href="#设置中文缩进" class="headerlink" title="设置中文缩进"></a>设置中文缩进</h3><p>中文撰写时习惯首行缩进，但是直接输入空格不能奏效，网上有教程可以设置自动缩进<code>2 em</code>，但是这样设置后还需要对不需要缩进的位置进行单独设置，同时自动缩进可能对排版不友好的文章不友好，可能在不该缩进的地方都给缩进了，所以我选择在写博文时手动在需要缩进的地方进行设置，即手动输入空格，此处将习惯的<code>space</code>即空格键输入换成<code>&amp;emsp;</code>或<code>&amp;#8195;</code>即可<sup id="fnref:11"><a href="#fn:11" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[markdown中实现首行缩进](https://blog.csdn.net/mountzf/article/details/51714763)
">[11]</span></a></sup>，输入两个即缩进两格，注意分号<code>;</code>不要漏掉，其他空格替换符如下：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">半方大的空白：   <span class="code">`&amp;ensp;`</span> or <span class="code">`&amp;#8194;`</span></span><br><span class="line">全方大的空白：   <span class="code">`&amp;emsp;`</span> or <span class="code">`&amp;#8195;`</span></span><br><span class="line">不断行的空白格： <span class="code">`&amp;nbsp;`</span> or <span class="code">`&amp;#160;`</span></span><br></pre></td></tr></table></figure>

<h3 id="静态代码压缩"><a href="#静态代码压缩" class="headerlink" title="静态代码压缩"></a>静态代码压缩</h3><p>为了让博客源码显得紧凑，也为了让网站加载速度变快，使用<code>gulp</code>对博客源码进行压缩。<sup id="fnref:12"><a href="#fn:12" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[gulp压缩源码](https://juejin.im/post/5dd2e898e51d45400206a466#heading-16)
">[12]</span></a></sup><br>1）安装<code>gulp</code>插件<br>安装<code>gulp</code>记得需要在全局环境下进行安装，不要只在博客根目录下的环境进行安装，否则会导致<code>gulp</code>无法正常执行。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install gulp --save  <span class="comment">#安装gulp</span></span><br></pre></td></tr></table></figure>
<p>2）安装功能模块<br>以下功能模块会在后续配置中使用，可以根据个人实际需要进行选择安装，一般建议<code>html</code>和<code>css</code>相关源码进行压缩，所以对应模块建议安装。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装功能模块</span></span><br><span class="line">npm install gulp-htmlclean gulp-htmlmin gulp-minify-css gulp-uglify gulp-imagemin --save</span><br><span class="line"><span class="comment"># 额外的功能模块</span></span><br><span class="line">npm install gulp-debug gulp-clean-css gulp-changed gulp-if gulp-plumber gulp-babel babel-preset-env del --save</span><br></pre></td></tr></table></figure>
<p>3）<code>gulpfile.js</code>配置<br>在博客根目录<code>../hexo</code>新建文件<code>gulpfile.js</code>，添加以下配置信息，可根据自身需要进行修改：</p>
<details>
<summary>点击查看具体代码</summary>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">"gulp"</span>);</span><br><span class="line"><span class="keyword">var</span> debug = <span class="built_in">require</span>(<span class="string">"gulp-debug"</span>);</span><br><span class="line"><span class="keyword">var</span> cleancss = <span class="built_in">require</span>(<span class="string">"gulp-clean-css"</span>); <span class="comment">//css压缩组件</span></span><br><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">"gulp-uglify"</span>); <span class="comment">//js压缩组件</span></span><br><span class="line"><span class="keyword">var</span> htmlmin = <span class="built_in">require</span>(<span class="string">"gulp-htmlmin"</span>); <span class="comment">//html压缩组件</span></span><br><span class="line"><span class="keyword">var</span> htmlclean = <span class="built_in">require</span>(<span class="string">"gulp-htmlclean"</span>); <span class="comment">//html清理组件</span></span><br><span class="line"><span class="keyword">var</span> imagemin = <span class="built_in">require</span>(<span class="string">"gulp-imagemin"</span>); <span class="comment">//图片压缩组件</span></span><br><span class="line"><span class="keyword">var</span> changed = <span class="built_in">require</span>(<span class="string">"gulp-changed"</span>); <span class="comment">//文件更改校验组件</span></span><br><span class="line"><span class="keyword">var</span> gulpif = <span class="built_in">require</span>(<span class="string">"gulp-if"</span>); <span class="comment">//任务 帮助调用组件</span></span><br><span class="line"><span class="keyword">var</span> plumber = <span class="built_in">require</span>(<span class="string">"gulp-plumber"</span>); <span class="comment">//容错组件（发生错误不跳出任务，并报出错误内容）</span></span><br><span class="line"><span class="keyword">var</span> isScriptAll = <span class="literal">true</span>; <span class="comment">//是否处理所有文件，(true|处理所有文件)(false|只处理有更改的文件)</span></span><br><span class="line"><span class="keyword">var</span> isDebug = <span class="literal">true</span>; <span class="comment">//是否调试显示 编译通过的文件</span></span><br><span class="line"><span class="keyword">var</span> gulpBabel = <span class="built_in">require</span>(<span class="string">"gulp-babel"</span>);</span><br><span class="line"><span class="keyword">var</span> es2015Preset = <span class="built_in">require</span>(<span class="string">"babel-preset-es2015"</span>);</span><br><span class="line"><span class="keyword">var</span> del = <span class="built_in">require</span>(<span class="string">"del"</span>);</span><br><span class="line"><span class="keyword">var</span> Hexo = <span class="built_in">require</span>(<span class="string">"hexo"</span>);</span><br><span class="line"><span class="keyword">var</span> hexo = <span class="keyword">new</span> Hexo(process.cwd(), &#123;&#125;); <span class="comment">// 初始化一个hexo对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 清除public文件夹</span></span><br><span class="line">gulp.task(<span class="string">"clean"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> del([<span class="string">"public/**/*"</span>]);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面几个跟hexo有关的操作，主要通过hexo.call()去执行，注意return</span></span><br><span class="line"><span class="comment">// 创建静态页面 （等同 hexo generate）</span></span><br><span class="line">gulp.task(<span class="string">"generate"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> hexo.init().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> hexo</span><br><span class="line">      .call(<span class="string">"generate"</span>, &#123;</span><br><span class="line">        watch: <span class="literal">false</span></span><br><span class="line">      &#125;)</span><br><span class="line">      .then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hexo.exit();</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hexo.exit(err);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动Hexo服务器</span></span><br><span class="line">gulp.task(<span class="string">"server"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> hexo</span><br><span class="line">    .init()</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> hexo.call(<span class="string">"server"</span>, &#123;&#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(err);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 部署到服务器</span></span><br><span class="line">gulp.task(<span class="string">"deploy"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> hexo.init().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> hexo</span><br><span class="line">      .call(<span class="string">"deploy"</span>, &#123;</span><br><span class="line">        watch: <span class="literal">false</span></span><br><span class="line">      &#125;)</span><br><span class="line">      .then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hexo.exit();</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hexo.exit(err);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩public目录下的js文件</span></span><br><span class="line">gulp.task(<span class="string">"compressJs"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp</span><br><span class="line">    .src([<span class="string">"./public/**/*.js"</span>, <span class="string">"!./public/libs/**"</span>]) <span class="comment">//排除的js</span></span><br><span class="line">    .pipe(gulpif(!isScriptAll, changed(<span class="string">"./public"</span>)))</span><br><span class="line">    .pipe(gulpif(isDebug, debug(&#123; <span class="attr">title</span>: <span class="string">"Compress JS:"</span> &#125;)))</span><br><span class="line">    .pipe(plumber())</span><br><span class="line">    .pipe(</span><br><span class="line">      gulpBabel(&#123;</span><br><span class="line">        presets: [es2015Preset] <span class="comment">// es5检查机制</span></span><br><span class="line">      &#125;)</span><br><span class="line">    )</span><br><span class="line">    .pipe(uglify()) <span class="comment">//调用压缩组件方法uglify(),对合并的文件进行压缩</span></span><br><span class="line">    .pipe(gulp.dest(<span class="string">"./public"</span>)); <span class="comment">//输出到目标目录</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩public目录下的css文件</span></span><br><span class="line">gulp.task(<span class="string">"compressCss"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> option = &#123;</span><br><span class="line">    rebase: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">//advanced: true,               //类型：Boolean 默认：true [是否开启高级优化（合并选择器等）]</span></span><br><span class="line">    compatibility: <span class="string">"ie7"</span> <span class="comment">//保留ie7及以下兼容写法 类型：String 默认：''or'*' [启用兼容模式； 'ie7'：IE7兼容模式，'ie8'：IE8兼容模式，'*'：IE9+兼容模式]</span></span><br><span class="line">    <span class="comment">//keepBreaks: true,             //类型：Boolean 默认：false [是否保留换行]</span></span><br><span class="line">    <span class="comment">//keepSpecialComments: '*'      //保留所有特殊前缀 当你用autoprefixer生成的浏览器前缀，如果不加这个参数，有可能将会删除你的部分前缀</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> gulp</span><br><span class="line">    .src([<span class="string">"./public/**/*.css"</span>, <span class="string">"!./public/**/*.min.css"</span>]) <span class="comment">//排除的css</span></span><br><span class="line">    .pipe(gulpif(!isScriptAll, changed(<span class="string">"./public"</span>)))</span><br><span class="line">    .pipe(gulpif(isDebug, debug(&#123; <span class="attr">title</span>: <span class="string">"Compress CSS:"</span> &#125;)))</span><br><span class="line">    .pipe(plumber())</span><br><span class="line">    .pipe(cleancss(option))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">"./public"</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩public目录下的html文件</span></span><br><span class="line">gulp.task(<span class="string">"compressHtml"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> cleanOptions = &#123;</span><br><span class="line">    protect: <span class="regexp">/&lt;\!--%fooTemplate\b.*?%--&gt;/g</span>, <span class="comment">//忽略处理</span></span><br><span class="line">    unprotect: <span class="regexp">/&lt;script [^&gt;]*\btype="text\/x-handlebars-template"[\s\S]+?&lt;\/script&gt;/gi</span> <span class="comment">//特殊处理</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">var</span> minOption = &#123;</span><br><span class="line">    collapseWhitespace: <span class="literal">true</span>, <span class="comment">//压缩HTML</span></span><br><span class="line">    collapseBooleanAttributes: <span class="literal">true</span>, <span class="comment">//省略布尔属性的值  &lt;input checked="true"/&gt; ==&gt; &lt;input /&gt;</span></span><br><span class="line">    removeEmptyAttributes: <span class="literal">true</span>, <span class="comment">//删除所有空格作属性值    &lt;input id="" /&gt; ==&gt; &lt;input /&gt;</span></span><br><span class="line">    removeScriptTypeAttributes: <span class="literal">true</span>, <span class="comment">//删除&lt;script&gt;的type="text/javascript"</span></span><br><span class="line">    removeStyleLinkTypeAttributes: <span class="literal">true</span>, <span class="comment">//删除&lt;style&gt;和&lt;link&gt;的type="text/css"</span></span><br><span class="line">    removeComments: <span class="literal">true</span>, <span class="comment">//清除HTML注释</span></span><br><span class="line">    minifyJS: <span class="literal">true</span>, <span class="comment">//压缩页面JS</span></span><br><span class="line">    minifyCSS: <span class="literal">true</span>, <span class="comment">//压缩页面CSS</span></span><br><span class="line">    minifyURLs: <span class="literal">true</span> <span class="comment">//替换页面URL</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">"./public/**/*.html"</span>)</span><br><span class="line">    .pipe(gulpif(isDebug, debug(&#123; <span class="attr">title</span>: <span class="string">"Compress HTML:"</span> &#125;)))</span><br><span class="line">    .pipe(plumber())</span><br><span class="line">    .pipe(htmlclean(cleanOptions))</span><br><span class="line">    .pipe(htmlmin(minOption))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">"./public"</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩 public/uploads 目录内图片</span></span><br><span class="line">gulp.task(<span class="string">"compressImage"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> option = &#123;</span><br><span class="line">    optimizationLevel: <span class="number">5</span>, <span class="comment">//类型：Number  默认：3  取值范围：0-7（优化等级）</span></span><br><span class="line">    progressive: <span class="literal">true</span>, <span class="comment">//类型：Boolean 默认：false 无损压缩jpg图片</span></span><br><span class="line">    interlaced: <span class="literal">false</span>, <span class="comment">//类型：Boolean 默认：false 隔行扫描gif进行渲染</span></span><br><span class="line">    multipass: <span class="literal">false</span> <span class="comment">//类型：Boolean 默认：false 多次优化svg直到完全优化</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">"./public/medias/**/*.*"</span>)</span><br><span class="line">    .pipe(gulpif(!isScriptAll, changed(<span class="string">"./public/medias"</span>)))</span><br><span class="line">    .pipe(gulpif(isDebug, debug(&#123; <span class="attr">title</span>: <span class="string">"Compress Images:"</span> &#125;)))</span><br><span class="line">    .pipe(plumber())</span><br><span class="line">    .pipe(imagemin(option))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">"./public"</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 执行顺序： 清除public目录 -&gt; 产生原始博客内容 -&gt; 执行压缩混淆 -&gt; 部署到服务器</span></span><br><span class="line">gulp.task(</span><br><span class="line">  <span class="string">"build"</span>,</span><br><span class="line">  gulp.series(</span><br><span class="line">    <span class="string">"clean"</span>,</span><br><span class="line">    <span class="string">"generate"</span>,</span><br><span class="line">    <span class="string">"compressHtml"</span>,</span><br><span class="line">    <span class="string">"compressCss"</span>,</span><br><span class="line">    <span class="string">"compressJs"</span>,</span><br><span class="line">    <span class="string">"compressImage"</span>,</span><br><span class="line">    gulp.parallel(<span class="string">"deploy"</span>)</span><br><span class="line">  )</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认任务</span></span><br><span class="line">gulp.task(</span><br><span class="line">  <span class="string">"default"</span>,</span><br><span class="line">  gulp.series(</span><br><span class="line">    <span class="string">"clean"</span>,</span><br><span class="line">    <span class="string">"generate"</span>,</span><br><span class="line">    gulp.parallel(<span class="string">"compressHtml"</span>, <span class="string">"compressCss"</span>, <span class="string">"compressImage"</span>, <span class="string">"compressJs"</span>)</span><br><span class="line">  )</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
</details>
4）部署
完成配置修改后，在博客根目录下打开`git bash`，按照[配置修改后更新部署即可](#Update)。

<h3 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h3><p>在<code>Next.Mist</code>主题下，友情链接默认显示在<code>站点概览</code>下方，在主题配置文件<code>../next/_config.yml</code>中找到<code>Blog rolls</code>设置块，其中<code>links_settings</code>是对友链的样式进行配置，<code>links</code>下按照以下格式添加即可添加友情链接：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">林深时见璐:</span> <span class="string">https://linwhitehat.github.io/</span></span><br></pre></td></tr></table></figure>

<h3 id="添加音乐"><a href="#添加音乐" class="headerlink" title="添加音乐"></a>添加音乐</h3><p>在分享博客时，一些文艺类型的博客可能适合添加背景音乐，既烘托文章意蕴，也让阅读者能欣赏雅乐。博客撰写是使用markdown，而markdown对html语法的支持是天然的，而为了在博客中样式更为美观，需要使用css进行一定设置，更多样式可参照此博客<sup id="fnref:13"><a href="#fn:13" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[markdown插入音频](https://yuanlichenai.cn/2019/03/03/music/)
">[13]</span></a></sup>，博文中直接写入以下代码：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">iframe</span> </span><br><span class="line">    frameborder="no" border="0" marginwidth="0" </span><br><span class="line">    marginheight="0" width=330 height=86 </span><br><span class="line">    src="//music.163.com/outchain/player?type=2&amp;id=461544312&amp;auto=0&amp;height=66"&gt;</span><br><span class="line">&lt;/iframe&gt;</span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<iframe 
    frameborder="no" border="0" marginwidth="0" 
    marginheight="0" width=330 height=86 
    src="//music.163.com/outchain/player?type=2&id=461544312&auto=0&height=66">
</iframe>

<h3 id="自定义设计思路"><a href="#自定义设计思路" class="headerlink" title="自定义设计思路"></a>自定义设计思路</h3><p>在<code>../hexo/source/_data/</code>目录下可以自建自定义样式文件，在<code>../next/_config.yml</code>主题配置文件中<code>custom_file_path</code>即对应自定义配置文件信息，而调试的过程可以在浏览器的开发者模式下进行调试<sup id="fnref:14"><a href="#fn:14" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[学会使用浏览器F12定位样式](https://bestzuo.cn/posts/blog-establish.html#%E5%AD%A6%E4%BC%9A%E4%BD%BF%E7%94%A8%E6%B5%8F%E8%A7%88%E5%99%A8F12%E5%AE%9A%E4%BD%8D%E6%A0%B7%E5%BC%8F)
">[14]</span></a></sup>。</p>
<h3 id="自定义站点LOGO"><a href="#自定义站点LOGO" class="headerlink" title="自定义站点LOGO"></a>自定义站点LOGO</h3><p>默认的Hexo博客使用的是Hexo的Logo，在chrome浏览器访问博客时，标签页的图标即默认Logo，而Hexo博客本身支持使用自定义的图标，修改站点Logo步骤如下：</p>
<ol>
<li>选取合适的图片，制作favicon图标，使用<a href="http://www.bitbug.net/" target="_blank" rel="noopener">比特虫</a><sup id="fnref:15"><a href="#fn:15" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[自定义博客图标](https://wangxiaoyu-go.github.io/2018/11/18/change-theme-favicon/)
">[15]</span></a></sup>生成<code>ico</code>格式文件；</li>
<li>存储自定义的<code>ico</code>图片文件到<code>../next/source/images</code>目录下；</li>
<li>修改博客主题配置文件<code>../next/_config.yml</code>，找到<code>favicon</code>选项，修改如下：</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">small:</span> <span class="string">/images/favicon-16x16-next.png</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">medium:</span> <span class="string">/images/favicon-32x32-next.png</span></span><br><span class="line"><span class="string">+</span> <span class="attr">small:</span> <span class="string">/images/new-favicon-16x16.ico</span></span><br><span class="line"><span class="string">+</span> <span class="attr">medium:</span> <span class="string">/images/new-favicon-32x32.ico</span></span><br></pre></td></tr></table></figure>

<h3 id="自定义字体"><a href="#自定义字体" class="headerlink" title="自定义字体"></a>自定义字体</h3><h4 id="字体默认配置"><a href="#字体默认配置" class="headerlink" title="字体默认配置"></a>字体默认配置</h4><p>博客默认的字体可能看起来不美观，可以在博客主题配置相关文件<code>../next/source/css/_variables/base.styl</code>中查看默认的字体配置信息如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$font-family-chinese      &#x3D; &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;;</span><br><span class="line"></span><br><span class="line">$font-family-base         &#x3D; $font-family-chinese, sans-serif;</span><br><span class="line">$font-family-base         &#x3D; get_font_family(&#39;global&#39;), $font-family-chinese, sans-serif if get_font_family(&#39;global&#39;);</span><br><span class="line"></span><br><span class="line">$font-family-logo         &#x3D; $font-family-base;</span><br><span class="line">$font-family-logo         &#x3D; get_font_family(&#39;title&#39;), $font-family-base if get_font_family(&#39;title&#39;);</span><br><span class="line"></span><br><span class="line">$font-family-headings     &#x3D; $font-family-base;</span><br><span class="line">$font-family-headings     &#x3D; get_font_family(&#39;headings&#39;), $font-family-base if get_font_family(&#39;headings&#39;);</span><br><span class="line"></span><br><span class="line">$font-family-posts        &#x3D; $font-family-base;</span><br><span class="line">$font-family-posts        &#x3D; get_font_family(&#39;posts&#39;), $font-family-base if get_font_family(&#39;posts&#39;);</span><br><span class="line"></span><br><span class="line">$font-family-monospace    &#x3D; consolas, Menlo, monospace, $font-family-chinese;</span><br><span class="line">$font-family-monospace    &#x3D; get_font_family(&#39;codes&#39;), consolas, Menlo, monospace, $font-family-chinese if get_font_family(&#39;codes&#39;);</span><br><span class="line"></span><br><span class="line">$font-family-icons        &#x3D; &#39;FontAwesome&#39;;</span><br></pre></td></tr></table></figure>

<h4 id="使用Googlr-Fonts字体"><a href="#使用Googlr-Fonts字体" class="headerlink" title="使用Googlr Fonts字体"></a>使用Googlr Fonts字体</h4><p>通过在线加载字体的方式实现博客字体自定义（也可以选择本地字体，可见网上教程），<a href="https://fonts.google.com/" target="_blank" rel="noopener">Google Fonts</a>提供的英文字体质量很高，同时近几年也开始提供多种中文字体（也有其他语言字体），尽管样式有限，但是质量还是不错的。Next主题中带有字体修改配置，在主题配置文件<code>../next/_config.yml</code>中找到<code>font</code>，可看到默认设置：</p>
<details>
<summary>点击查看具体代码</summary>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">font:</span></span><br><span class="line">  <span class="comment"># Use custom fonts families or not.</span></span><br><span class="line">  <span class="comment"># Depended options: `external` and `family`.</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Uri of fonts host, e.g. //fonts.googleapis.com (Default).</span></span><br><span class="line">  <span class="attr">host:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font options:</span></span><br><span class="line">  <span class="comment"># `external: true` will load this font family from `host` above.</span></span><br><span class="line">  <span class="comment"># `family: Times New Roman`. Without any quotes.</span></span><br><span class="line">  <span class="comment"># `size: x.x`. Use `em` as unit. Default: 1 (16px)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Global font settings used for all elements inside &lt;body&gt;.</span></span><br><span class="line">  <span class="attr">global:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span> <span class="string">Lato</span></span><br><span class="line">    <span class="attr">size:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for site title (.site-title).</span></span><br><span class="line">  <span class="attr">title:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span></span><br><span class="line">    <span class="attr">size:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for headlines (&lt;h1&gt; to &lt;h6&gt;).</span></span><br><span class="line">  <span class="attr">headings:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span></span><br><span class="line">    <span class="attr">size:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for posts (.post-body).</span></span><br><span class="line">  <span class="attr">posts:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for &lt;code&gt; and code blocks.</span></span><br><span class="line">  <span class="attr">codes:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span></span><br></pre></td></tr></table></figure>
</details>
修改配置步骤如下:
1. 将`enable`选项修改为`true`，`host`可修改为国内镜像`fonts.loli.net`；
2. `global`、`title`、`posts`等选项是对具体项的字体设置，建议参考以下设置：

<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="bullet">- </span>global: 网站全局字体设置，建议填写英文字体</span><br><span class="line"><span class="bullet">- </span>其他类型可根据个人喜好</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>设置博客中文字体</li>
</ol>
<p>在<code>../next/source/css/_variables/base.styl</code>中修改默认中文字体，例如我选择中文字体为<code>Noto Serif SC</code>，修改如下：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">// Font families.</span><br><span class="line"><span class="deletion">-$font-family-chinese      = "PingFang SC", "Microsoft YaHei"</span></span><br><span class="line"><span class="addition">+$font-family-chinese      = "Noto Serif SC", "PingFang SC", "Microsoft YaHei"</span></span><br></pre></td></tr></table></figure>
<ol start="4">
<li>加载字体设置</li>
</ol>
<p>在博客中载入设置的字体，在自定义文件<code>../hexo/source/_data/head.swig</code>中加入以下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;link href&#x3D;&quot;https:&#x2F;&#x2F;fonts.googleapis.com&#x2F;css?family&#x3D;Noto+Serif+SC:400,500,700&amp;display&#x3D;swap&amp;subset&#x3D;chinese-simplified&quot; rel&#x3D;&quot;stylesheet&quot;&gt;</span><br></pre></td></tr></table></figure>
<p>加入的<code>&lt;link&gt;</code>标签内容在Google Fonts中生成，选中一款字体后，点<code>+</code>号选择，在底部会有一个选项框，点击一下会弹出字体设置框，点击<code>CUSTOMIZE</code>，对字体进行自定义设置，然后在<code>EMBED</code>中可以看到自动生成的<code>&lt;link&gt;</code>代码，将其添加到上述对应位置，其中域名<code>fonts.googleapis.com</code>可修改为国内镜像域名<code>fonts.loli.net</code>。</p>
<h3 id="自定义超链接样式"><a href="#自定义超链接样式" class="headerlink" title="自定义超链接样式"></a>自定义超链接样式</h3><p>在自定义样式文件<code>../hexo/source/_data/styles.styl</code>中添加以下内容，主要是颜色和下划线的设置，其他可以根据个人喜欢修改（颜色可参照<a href="https://tool.oschina.net/commons?type=3" target="_blank" rel="noopener">RGB</a>）<sup id="fnref:16"><a href="#fn:16" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[CSS样式美化](https://www.libinx.com/2017/2017-03-12-hexo-next-beautify/)">[16]</span></a></sup>：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// 超链接样式</span><br><span class="line"><span class="selector-class">.post-body</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">32</span>, <span class="number">178</span>, <span class="number">170</span>);</span><br><span class="line">    <span class="attribute">border-bottom</span>: none;</span><br><span class="line">    &amp;:hover &#123;</span><br><span class="line">      <span class="selector-tag">color</span>: <span class="selector-tag">rgb</span>(30, 144, 255);</span><br><span class="line">      <span class="selector-tag">text-decoration</span>: <span class="selector-tag">underline</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.posts-expand</span> <span class="selector-class">.post-meta</span> <span class="selector-tag">a</span>, <span class="selector-class">.post-copyright</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">border-bottom</span>: none;</span><br><span class="line">    &amp;:hover &#123;</span><br><span class="line">      <span class="selector-tag">color</span>: <span class="selector-tag">rgb</span>(30, 144, 255);</span><br><span class="line">      <span class="selector-tag">text-decoration</span>: <span class="selector-tag">underline</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">border-bottom-color</span>: <span class="built_in">rgb</span>(<span class="number">80</span>, <span class="number">115</span>, <span class="number">184</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">30</span>, <span class="number">144</span>, <span class="number">255</span>);</span><br><span class="line">    <span class="attribute">border-bottom-color</span>: <span class="built_in">rgb</span>(<span class="number">30</span>, <span class="number">144</span>, <span class="number">255</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="配置修改后更新部署"><a href="#配置修改后更新部署" class="headerlink" title="配置修改后更新部署"></a><span id="Update">配置修改后更新部署</span></h3><p>输入以下命令完成每次更新：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">gulp</span><br><span class="line">gulp build</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>这篇博客基于hexo和next初始配置完成的情况对博客进行主题功能和外观的优化，撰写初衷是将自身搭建博客进行记录，因为Hexo主题更新频繁，不同版本之间的配置处理并不完全一致，根据已有的参考需要进行实际优化处理，同时也对Hexo结构了解更深刻，希望将来能更多的自定义实现渲染效果的设计，搭建更自主化的博客。</p>
<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.jianshu.com/p/78c218f9d1e7" target="_blank" rel="noopener">设置阅读全文</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://hexo.io/zh-cn/docs/front-matter.html" target="_blank" rel="noopener">分类二级目录</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://wangjiezhe.com/posts/2018-10-29-Hexo-NexT-3/" target="_blank" rel="noopener">评论系统</a><a href="#fnref:3" rev="footnote"> ↩</a></span></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">4.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://blog.singee.me/2017/12/07/mist-img-center/" target="_blank" rel="noopener">图片居中设置</a><a href="#fnref:4" rev="footnote"> ↩</a></span></li><li id="fn:5"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">5.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://guanqr.com/study/blog/hexo-theme-next-customization/" target="_blank" rel="noopener">插入脚注</a><a href="#fnref:5" rev="footnote"> ↩</a></span></li><li id="fn:6"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">6.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://benzblog.site/2019-07-12-HexoTricks/" target="_blank" rel="noopener">注脚选择</a><a href="#fnref:6" rev="footnote"> ↩</a></span></li><li id="fn:7"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">7.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://blog.bill.moe/hexo-theme-next-config-optimization/" target="_blank" rel="noopener">分割线样式修改</a><a href="#fnref:7" rev="footnote"> ↩</a></span></li><li id="fn:8"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">8.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="http://eternalzttz.com/hexo-next.html" target="_blank" rel="noopener">页脚显示博客运行时间</a><a href="#fnref:8" rev="footnote"> ↩</a></span></li><li id="fn:9"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">9.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://yunhao.space/2018/06/27/hexo-leancloud-plugin-installation-tutor/" target="_blank" rel="noopener">部署LeanCloud显示阅读数量</a><a href="#fnref:9" rev="footnote"> ↩</a></span></li><li id="fn:10"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">10.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://wangyi.blog/2019/12/24/Next%E4%B8%BB%E9%A2%98%E6%97%A0%E6%B3%95%E8%8E%B7%E5%8F%96Leancloud%E9%98%85%E8%AF%BB%E6%AC%A1%E6%95%B0%E7%9A%84%E9%97%AE%E9%A2%98/" target="_blank" rel="noopener">Next主题无法获取Leancloud阅读次数的问题</a><a href="#fnref:10" rev="footnote"> ↩</a></span></li><li id="fn:11"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">11.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://blog.csdn.net/mountzf/article/details/51714763" target="_blank" rel="noopener">markdown中实现首行缩进</a><a href="#fnref:11" rev="footnote"> ↩</a></span></li><li id="fn:12"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">12.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://juejin.im/post/5dd2e898e51d45400206a466#heading-16" target="_blank" rel="noopener">gulp压缩源码</a><a href="#fnref:12" rev="footnote"> ↩</a></span></li><li id="fn:13"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">13.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://yuanlichenai.cn/2019/03/03/music/" target="_blank" rel="noopener">markdown插入音频</a><a href="#fnref:13" rev="footnote"> ↩</a></span></li><li id="fn:14"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">14.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://bestzuo.cn/posts/blog-establish.html#%E5%AD%A6%E4%BC%9A%E4%BD%BF%E7%94%A8%E6%B5%8F%E8%A7%88%E5%99%A8F12%E5%AE%9A%E4%BD%8D%E6%A0%B7%E5%BC%8F" target="_blank" rel="noopener">学会使用浏览器F12定位样式</a><a href="#fnref:14" rev="footnote"> ↩</a></span></li><li id="fn:15"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">15.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://wangxiaoyu-go.github.io/2018/11/18/change-theme-favicon/" target="_blank" rel="noopener">自定义博客图标</a><a href="#fnref:15" rev="footnote"> ↩</a></span></li><li id="fn:16"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">16.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.libinx.com/2017/2017-03-12-hexo-next-beautify/" target="_blank" rel="noopener">CSS样式美化</a><a href="#fnref:16" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>技术分享</category>
        <category>博客</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next</tag>
        <tag>Mist</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows查看端口占用</title>
    <url>/Windows%E6%9F%A5%E7%9C%8B%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>在windows下需要查看端口占用情况，同时排查哪些应用正在使用当前端口<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Windows下如何查看某个端口被谁占用](https://www.runoob.com/w3cnote/windows-finds-port-usage.html)">[1]</span></a></sup>。</p>
<a id="more"></a>

<h2 id="命令行操作说明"><a href="#命令行操作说明" class="headerlink" title="命令行操作说明"></a>命令行操作说明</h2><h3 id="打开命令行（管理员身份）"><a href="#打开命令行（管理员身份）" class="headerlink" title="打开命令行（管理员身份）"></a>打开命令行（管理员身份）</h3><p>1） 在开始菜单搜索<code>cmd</code>，右键点击<code>命令行提示窗口</code>以管理员身份运行；</p>
<p>2） 按快捷组合键<code>Windows+r</code>，输入<code>cmd</code>。</p>
<h3 id="查看所有端口"><a href="#查看所有端口" class="headerlink" title="查看所有端口"></a>查看所有端口</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netstat -ano</span><br></pre></td></tr></table></figure>
<p>每个地址后面显示的即端口号，最后一列表示对应的进程号PID。</p>
<p><img src="https://www.runoob.com/wp-content/uploads/2018/07/1530674518-5109-2159693-5342695777bde48d.png" alt="系统所有端口信息查看"><i class="img-caption">☆ 系统所有端口信息查看</i></p>
<h3 id="查看具体端口使用的进程"><a href="#查看具体端口使用的进程" class="headerlink" title="查看具体端口使用的进程"></a>查看具体端口使用的进程</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netstat -aon|findstr <span class="string">"8081"</span></span><br></pre></td></tr></table></figure>
<p>显示使用当前端口的进程情况。</p>
<p><img src="https://www.runoob.com/wp-content/uploads/2018/07/1530674518-6203-2159693-10d9bae7a6e59b06.png" alt="端口对应使用进程查看"><i class="img-caption">☆ 端口对应使用进程查看</i></p>
<h3 id="查看指定进程"><a href="#查看指定进程" class="headerlink" title="查看指定进程"></a>查看指定进程</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tasklist|findstr <span class="string">"9088"</span></span><br></pre></td></tr></table></figure>
<p>查看是哪个进程或者程序占用了 8081 端口，结果是：node.exe。</p>
<p><img src="https://www.runoob.com/wp-content/uploads/2018/07/1530674518-3794-2159693-30d1a50103f28cea.png" alt="查看具体进程"><i class="img-caption">☆ 查看具体进程</i></p>
<h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>本文是用于Windows下端口被占用时的排查方法，由于在windows环境下较少使用命令行，对少用的命令不熟悉，所以记录下来。</p>
<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.runoob.com/w3cnote/windows-finds-port-usage.html" target="_blank" rel="noopener">Windows下如何查看某个端口被谁占用</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Handbook</category>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>端口查看</tag>
      </tags>
  </entry>
  <entry>
    <title>LaTeX-安装教程</title>
    <url>/LaTeX%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>作为一名研究僧，写论文，写文档，写日志，写报告，写书……还是比较平常的一件事，而office系列对于排版要求严格又惜时如金的人而言还是次选，所以开始入坑LaTeX，经过慎重的调研之后，选择了texlive+texstudio的形式开始入坑，当然还有很多其他选择，如果写完这篇还记得会在参考链接下附上<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[TeX Live & TeXstudio 安装手记](https://www.cnblogs.com/joyeecheung/p/3596255.html)
">[1]</span></a></sup><sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[第一篇tex文档编写](http://www.ctex.org/OnlineDocuments)
">[2]</span></a></sup>。</p>
<a id="more"></a>

<h2 id="调研选择"><a href="#调研选择" class="headerlink" title="调研选择"></a>调研选择</h2><p>其实这部分只是自己做一点记录，急需安装教程的请跳过，请看第2节。</p>
<p>经过多番Google、csdn以及知乎的查阅，大概了解了latex的编译环境和编辑环境，主流的有ctex、texlive、texstudio+winedt等等，我的选择变化大致如下：</p>
<ol>
<li><p>在上过的一门算法课中老师推荐了跨平台下的latex集成工具，ctex被建议在windows下使用，所以最初我的选择是ctex，附上清华镜像，<a href="https://mirrors.tuna.tsinghua.edu.cn/ctex/legacy/2.9/" target="_blank" rel="noopener" title="ctex清华镜像">Ctex-mirror</a>，官方网站<a href="http://www.ctex.org/HomePage" target="_blank" rel="noopener">CTeX</a>，加上ctex对中文的支持很好，且集成工具完整，当下载3G的安装包时，我又调研了不少教程，但是在某csdn的教程中看的评论有人评价ctex已不维护很久，同时ctex安装后会对系统环境变量进行覆盖，想想这个风险还是挺大的，毕竟安装需要配置换件变量的应用还挺多的，这篇<a href="https://liam.page/texlive/" target="_blank" rel="noopener">博文</a>有说明，接着看到在不少教程中推荐texlive（可谓官方），这是由 TUG (TeX User Group) 维护和发布的tex系统，接着有了第2个选择；</p>
</li>
<li><p>开始调研texlive，看看官网<a href="https://tug.org/texlive/" target="_blank" rel="noopener" title="texlive">TexLive</a>，维护还是比较好的，有2019最新版本，有多国镜像，有完整教学文档，感觉比ctex完善很多，果断放弃ctex，尽管这个时候安装文件也下载得差不多了，同时看到texstudio是tex编辑的不错的集成环境，官方的介绍是这样的：</p>
</li>
</ol>
<p><em>TeXstudio is an integrated writing environment for creating LaTeX documents. Our goal is to make writing LaTeX as easy and comfortable as possible. Therefore TeXstudio has numerous features like syntax-highlighting, integrated viewer, reference checking and various assistants.</em></p>
<p>安装提供zip压缩包直接解压使用，很适合我这种不喜欢安装包的人，因为便于迁移，抉择已定，开始下载和安装。</p>
<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><blockquote>
<p>先提供需要安装的文件（texlive和texstudio）的<a href="https://pan.baidu.com/s/1mRKV0VeNfjxhY6qGvSQdLw" target="_blank" rel="noopener" title="网盘链接">网盘链接</a>，提取码：uhbe </p>
</blockquote>
<p>官方提供了下载方式：</p>
<ol>
<li>texlive，<a href="https://mirror.bjtu.edu.cn/ctan/systems/texlive/Images/texlive2019.iso" target="_blank" rel="noopener">官方镜像</a>，如果访问不了，可以访问国内镜像，如<a href="http://mirrors.ustc.edu.cn/CTAN/systems/texlive/" target="_blank" rel="noopener">中科大镜像</a>；</li>
<li>texstudio，我选择的是zip压缩文件形式，<a href="https://github.com/texstudio-org/texstudio/releases/download/2.12.16/texstudio-2.12.16-win-portable-qt5.zip" target="_blank" rel="noopener">下载</a>；</li>
</ol>
<p>当然也可以直接下载我网盘分享的镜像和安装包，可以使用官方提供的md5值进行比对验证文件没有被篡改。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="TexLive-安装"><a href="#TexLive-安装" class="headerlink" title="TexLive 安装"></a>TexLive 安装</h3><p>下载好iso文件之后，由于我是win10系统，可以直接加载iso镜像文件，因此双击打开即可，如果是win7及以前的版本需要先解压iso文件，双击打开install-tl-advanced.bat文件，会出现以下界面：</p>
<p><img src="/images/post-texlive-install-1.jpg" alt="安装启动界面"><i class="img-caption">☆ 安装启动界面</i></p>
<p>点击<em>修改</em>更换需要安装的文件路径，路径建议不要带有中文和特殊字符；<br>点击<em>Advanced</em>修改安装选项，但默认是所有都选上，所以可以不用修改（因为涉及调用的宏包以及scheme选择，如果不了解还是默认，避免后续麻烦）；<br>点击<em>安装</em>，然后就是漫长的安装过程，安装期间可以做自己的事情，安装完成后显示如下：</p>
<p><img src="/images/post-texlive-install-2.jpg" alt="安装完成界面"><i class="img-caption">☆ 安装完成界面</i></p>
<p>做一下安装是否成功的检查：</p>
<ol>
<li>在开始菜单中搜索<em>TeX Live command-line</em>，执行以下命令：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xelatex -v</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>如果正常会显示如下信息，即正常的texlive版本号：</p>
<p><img src="/images/post-texlive-test-1.jpg" alt="测试正常界面"><i class="img-caption">☆ 测试正常界面</i></p>
<p>如果显示错误如下，应该是系统环境变量的问题，进入系统环境变量（系统属性-&gt;高级系统设置-&gt;环境变量），将<em>Path</em>环境变量新增texlive进去，即将安装好的texlive文件目录下的bin文件夹所在的路径作为环境变量。</p>
<p><img src="/images/post-texlive-test-2.jpg" alt="测试错误界面"><i class="img-caption">☆ 测试错误界面</i></p>
<h3 id="TexStudio-安装"><a href="#TexStudio-安装" class="headerlink" title="TexStudio 安装"></a>TexStudio 安装</h3><p>下载好zip压缩文件之后，直接解压就可以使用，十分方便！</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>主要是texstudio需要进行配置，更适合国内人士使用。</p>
<h3 id="语言设置"><a href="#语言设置" class="headerlink" title="语言设置"></a>语言设置</h3><p>打开texstudio之后，在主界面中显示的是英文，点击菜单栏的<em>Options</em>，点击<em>Configure TeXstudio</em>，在<em>General</em>选项下将<em>Language</em>选择为<em>zh_CN</em>，点击确定；</p>
<h3 id="编译环境设置"><a href="#编译环境设置" class="headerlink" title="编译环境设置"></a>编译环境设置</h3><p>在语言设置一样的窗口，此时显示语言是中文，点击<em>构建</em>-&gt;<em>默认编译器<em>设置为”XeLaTeX”，支持中文LaTeX文档；<br>将</em>构建</em>-&gt;<em>默认文献工具<em>设置为”Biber”；<br>在</em>命令</em>-&gt;<em>XeLaTeX</em>设置编译参数，使用 -shell-escape 参数以支持“minted”代码排版宏包；</p>
<p>点击<em>构建</em>-&gt;<em>默认编译器<em>设置为”Latexmk”实现一次性编译；<br>将</em>命令</em>-&gt;<em>Latexmk<em>的 -pdf 参数修改为 -xelatex 以支持中文；<br>在</em>命令</em>-&gt;<em>Latexmk</em>设置编译参数，使用 -shell-escape 参数以支持“minted”代码排版宏包；<br>点击确定</p>
<p>点击菜单栏<em>帮助</em>-&gt;<em>检查Latex安装信息</em>，若正确输出系统报告，说明texlive正常工作。</p>
<h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>第一篇tex文档参照这篇博客，<a href="https://blog.csdn.net/yeler082/article/details/80665186" target="_blank" rel="noopener">Texlive+TeXstudio 入门安装使用</a>，照着输入，然后点击两个绿色箭头重叠的按钮，可以看到实时生成的文档。</p>
<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.cnblogs.com/joyeecheung/p/3596255.html" target="_blank" rel="noopener">TeX Live &amp; TeXstudio 安装手记</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="http://www.ctex.org/OnlineDocuments" target="_blank" rel="noopener">第一篇tex文档编写</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Latex</category>
      </categories>
      <tags>
        <tag>Latex安装</tag>
        <tag>Windows10</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建个人博客(Hexo+Next+Github）</title>
    <url>/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>在经过多个教程摸索和尝试后，发现手把手有时候挺坑人的，毕竟经验还是要自己攒，不然没踩的坑迟早要踩到，最终我的个人博客<a href="https://linwhitehat.github.io/">林深时见璐</a>搭建完成，这篇教程会从本地博客建立到实现美观的网络博客进行记录分享，这篇博客也就会随着本博客的每一次升级完善而补充，希望能给想自建博客的朋友们提供帮助。</p>
<a id="more"></a>

<h2 id="最初的诞生"><a href="#最初的诞生" class="headerlink" title="最初的诞生"></a>最初的诞生</h2><p>我采用的搭建博客的方式是使用 <a href="https://pages.github.com/" target="_blank" rel="noopener">GitHub Pages</a> + <a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a> 的方式，这个应该是我摸索之后认为的对新手最友好也最优质的方式，只需要投入时间学习和运营，就能拥有美观的个人博客。以下的1 - 3小点是博客的雏形构建<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[博客雏形安装](https://www.jianshu.com/p/956c44c87fb1)">[1]</span></a></sup>。</p>
<h3 id="注册Github账号"><a href="#注册Github账号" class="headerlink" title="注册Github账号"></a>注册Github账号</h3><p>要使用 GitHub Pages，首先你要注册一个<a href="https://github.com/" target="_blank" rel="noopener">GitHub</a>账号。</p>
<p><img src="/images/blog-1.png" alt="GitHub注册页"><i class="img-caption">☆ GitHub注册页</i></p>
<h3 id="安装必备软件"><a href="#安装必备软件" class="headerlink" title="安装必备软件"></a>安装必备软件</h3><p>1) 安装<a href="https://git-scm.com/download/win" target="_blank" rel="noopener">Git</a>客户端</p>
<p>2) 安装<a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a></p>
<h3 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h3><ol>
<li>新建博客</li>
</ol>
<p>配置GitHub，步骤如下:</p>
<p>1) 登录GitHub后新建项目（new repository），项目名由两部分组成即GitHub账号名和固定后缀<code>.github.io</code>，比如我的项目就是<code>linwhitehat.github.io</code>，填写完点击创建项目（create repository）。</p>
<p>2) 配置GitHub SSH密钥，本地打开git bash，输入<code>ssh-keygen -t rsa -C &quot;your&#39;s emaill address&quot;</code>，其中your’s email address换成GitHub账号的邮箱地址，第一次点击回车键（Enter）会显示存储位置，第二次点击回车键会显示输入密钥，按照要求输入密钥两次(输入过程是看不到密钥的)，之后在第一次显示的存储位置打开文件id_rsa.pub，复制文件内所有内容，在GitHub中点击头像可看的setting选项，在setting选项中可看到SSH and GPG keys选项，点击new SSH，然后输入title（方便密钥管理的名字），将刚才复制的内容粘贴到key中。</p>
<p>3）创建本地仓库，在本地选择不包含中文的文件路径，新建一个文件夹，进入文件夹并点击右键选择git bash，输入以下命令进行设置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">git config --global user.name <span class="string">"Your's name"</span></span><br><span class="line">git config --global user.email <span class="string">"Your's email address"</span></span><br></pre></td></tr></table></figure>
<p>其中<code>Your&#39;s name</code>和<code>Your&#39;s email address</code>替换为GitHub账户名和对应邮箱地址。</p>
<p>4) 安装Hexo，按照之前方式进入git bash终端，输入<code>node</code>检测Node.js是否安装成功，若出现<code>&gt;</code>则表示正常，退出node模式，输入以下命令安装Hexo：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br><span class="line">hexo version</span><br></pre></td></tr></table></figure>
<p>看到输出版本号等信息表示安装Hexo成功，在当前新建的文件夹下新建一个hexo文件夹，在hexo文件夹中进入git bash，输入以下命令配置hexo，完成之后，在浏览器输入<code>http://localhost:4000</code>，正常则可看到初始化的博客，到此便完成本地博客的建立。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init</span><br><span class="line">npm install</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>5）配置Hexo到GitHub，在hexo文件夹下存在一个配置文件<code>_config.yml</code>，打开后可看到文件最后部分为：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"> <span class="attr">type:</span></span><br></pre></td></tr></table></figure>
<p>将其修改为以下内容，其中<code>yourname</code>为GitHub账号名：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span>  </span><br><span class="line"> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line"> <span class="attr">repository:</span> <span class="string">http://github.com/yourname/yourname.github.io.git</span></span><br><span class="line"> <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>
<p>保存后，在当前文件夹打开git bash并输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<p>若出现错误显示<code>ERROR Deployer not found: git</code>，则输入以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<p>若弹出填写GitHub账号用户名和密码则正常填写，完成之后在浏览器输入<code>https://yourname.github.io</code>，yourname替换为GitHub账户名，即可通过互联网访问博客。</p>
<p>6）如果不想自己新建，可以使用现有的他人博客项目进行改建，见<a href="#Section2">第2小节</a>。</p>
<ol start="2">
<li><span id="Section2">使用已有的博客模板</span></li>
</ol>
<p>1) 注册完成后搜索 <code>linwhitehat.github.io</code> 进入<a href="https://github.com/linwhitehat/linwhitehat.github.io" target="_blank" rel="noopener">我的仓库</a></p>
<p><img src="/images/blog-2.png" alt="GitHub项目"><i class="img-caption">☆ GitHub项目</i></p>
<p>点击右上角的 <strong>Fork</strong> 将我的仓库拉倒你的账号下</p>
<p>稍等一下，点击刷新，你会看到<strong>Fork</strong>了成功的页面</p>
<p><img src="/images/blog-3.png" alt="Fork项目"><i class="img-caption">☆ Fork项目</i></p>
<p>2) 修改仓库名</p>
<p>点击<strong>settings</strong>进入设置</p>
<p><img src="/images/blog-4.png" alt="项目设置修改"><i class="img-caption">☆ 项目设置修改</i></p>
<p id = "Rename"></p>
修改仓库名为 `你的Github账号名.github.io`，然后 Rename

<p><img src="/images/blog-5.png" alt="修改项目名"><i class="img-caption">☆ 修改项目名</i></p>
<p>这时你在在浏览器中输入 <code>你的Github账号名.github.io</code> 例如:<code>linwhitehat.github.io</code></p>
<p>你将会看到如下界面</p>
<p><img src="/images/blog-6.png" alt="博客首页"><i class="img-caption">☆ 博客首页</i></p>
<p>说明已经成功一半了😀当然，还需要修改博客的配置才能变成你的博客。</p>
<p>若是出现</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2178672-cfd55a22902a9d2c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="访问出错"><i class="img-caption">☆ 访问出错</i></p>
<p>则需要 <a href="#Rename">检查一下你的仓库名是否正确</a></p>
<h3 id="修改博客配置"><a href="#修改博客配置" class="headerlink" title="修改博客配置"></a>修改博客配置</h3><p>来到你的仓库，找到<code>_config.yml</code>文件,这是网站的全局配置文件。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2178672-c23d4a5d67c88084.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="博客配置文件"><i class="img-caption">☆ 博客配置文件</i></p>
<p>点击修改</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2178672-b37268df7a7852ca.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="修改配置文件"><i class="img-caption">☆ 修改配置文件</i></p>
<p>然后编辑<code>_config.yml</code>的内容</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2178672-0c8750f5a18dbe03.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="配置文件内容修改"><i class="img-caption">☆ 配置文件内容修改</i></p>
<p>接下来我们来详细说说以下配置文件的内容：</p>
<h3 id="基础设置说明"><a href="#基础设置说明" class="headerlink" title="基础设置说明"></a>基础设置说明</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Site settings</span></span><br><span class="line">title: Your Blog    				    <span class="comment">#你博客的标题</span></span><br><span class="line">SEOTitle: 你的博客 | Your Blog    	    <span class="comment">#显示在浏览器上搜索的时候显示的标题</span></span><br><span class="line">header-img: img/post-bg-rwd.jpg  	    <span class="comment">#显示在首页的背景图片</span></span><br><span class="line">email: You@gmail.com	</span><br><span class="line">description: <span class="string">"You Blog"</span>  			    <span class="comment">#网站介绍</span></span><br><span class="line">keyword: <span class="string">"L1n, L1n Blog"</span> <span class="comment">#关键词</span></span><br><span class="line">url: <span class="string">"https://linwhitehat.github.io"</span>  <span class="comment"># 这个就是填写你的博客地址</span></span><br><span class="line">baseurl: <span class="string">""</span>                           <span class="comment"># 这个我们不用填写</span></span><br></pre></td></tr></table></figure>

<p>至此，一个初具形态的博客便生成了。</p>
<h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><ol>
<li>本文中新建仓库建立博客的方式，在本地建立仓库后，又再新建一个hexo文件，且将hexo配置托管到GitHub之后，GitHub项目便被hexo文件夹下的<code>.deploy_git</code>覆盖，之后修改博客维护项目只需要在hexo文件夹下的git bash进行hexo处理即可。</li>
<li>本文博客搭建的目录结构如下，相关博客搭建及优化教程中涉及的路径参照此目录树：</li>
</ol>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"># 博客根目录</span><br><span class="line">|-- hexo</span><br><span class="line">|   |-- _config.yml</span><br><span class="line">|   |-- node_modules</span><br><span class="line">|   |-- public</span><br><span class="line">|   |-- scaffolds</span><br><span class="line">|   |-- source</span><br><span class="line">|   `-- themes</span><br><span class="line"></span><br><span class="line"># 主题根目录</span><br><span class="line">|-- themes</span><br><span class="line">    `-- next</span><br><span class="line">    |-- LICENSE.md</span><br><span class="line">    |-- README.md</span><br><span class="line">    |-- _config.yml</span><br><span class="line">    |-- docs</span><br><span class="line">    |-- languages</span><br><span class="line">    |-- layout</span><br><span class="line">    |-- scripts</span><br><span class="line">    `-- source</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>Hexo卸载方式，在git bash执行以下命令：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-cli -g</span><br><span class="line">npm uninstall hexo -g</span><br></pre></td></tr></table></figure>
<p>博客相应的文件目录需要手动删除。</p>
<h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>博客搭建基本完成，但是博客中有很多地方可以自定义设计，这也是自建博客的初衷，熟悉Hexo和Next.Mist的配置后，会逐步优化博客样式。</p>
<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.jianshu.com/p/956c44c87fb1" target="_blank" rel="noopener">博客雏形安装</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>技术分享</category>
        <category>博客</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
</search>
