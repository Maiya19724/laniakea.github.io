<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>博客优化(Hexo+Next)</title>
    <url>/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96.html</url>
    <content><![CDATA[<p>博客搭建完成后，最初的博客雏形一般都比较朴素，功能也有限，所以可以通过优化主题来进行美化博客外观和拓展博客功能。</p>
<a id="more"></a>

<h2 id="优化主题"><a href="#优化主题" class="headerlink" title="优化主题"></a>优化主题</h2><p>我的个人博客是<a href="https://linwhitehat.github.io/">Pikachu</a>，本文优化的效果可以访问博客进行观看。</p>
<ol>
<li>阅读全文设置</li>
</ol>
<p>由于初始博客并没有设置摘要的形式，因此博客首页会展示每篇博文的全文，显得十分冗长，为此设置<code>阅读全文</code>能简化博客首页，且让博文能以简短的摘要进行展示。</p>
<p>设置方法采用的是在博文中选择适当位置进行内容截断，填写以下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- more --&gt;</span><br></pre></td></tr></table></figure>

<p>这样首页便只会展示在截断位置前的内容。</p>
<ol start="2">
<li>分类二级目录显示</li>
</ol>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="https://www.jianshu.com/p/78c218f9d1e7" target="_blank" rel="noopener">设置阅读全文</a></li>
<li></li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next</tag>
      </tags>
  </entry>
  <entry>
    <title>逆向分析APK（一）</title>
    <url>/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90APK.html</url>
    <content><![CDATA[<p>最近开始做一些Android APP的分析，由于之前没有移动端逆向的基础，所以将自学和摸索的过程做下记录，但是并不是完整的逆向分析技术博客，只是针对具体的APK逆向分析中的技术记录。</p>
<a id="more"></a>

<h2 id="逆向工具和环境"><a href="#逆向工具和环境" class="headerlink" title="逆向工具和环境"></a>逆向工具和环境</h2><h3 id="Android-Studio"><a href="#Android-Studio" class="headerlink" title="Android Studio"></a>Android Studio</h3><p>Android Studio（AS）是一款谷歌推出的移动端应用开发的IDE，而在安装APP逆向分析中主要将其作为源码分析和调试的工具，同时使用AS自带的模拟器也比较方便。</p>
<h3 id="apk反编译"><a href="#apk反编译" class="headerlink" title="apk反编译"></a>apk反编译</h3><h3 id="apk重签名"><a href="#apk重签名" class="headerlink" title="apk重签名"></a>apk重签名</h3><h3 id="dex转jar"><a href="#dex转jar" class="headerlink" title="dex转jar"></a>dex转jar</h3><h3 id="java源码反编译查看"><a href="#java源码反编译查看" class="headerlink" title="java源码反编译查看"></a>java源码反编译查看</h3><h2 id="模拟器"><a href="#模拟器" class="headerlink" title="模拟器"></a>模拟器</h2>]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>逆向分析</tag>
        <tag>APK</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows查看端口占用</title>
    <url>/Windows%E6%9F%A5%E7%9C%8B%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8.html</url>
    <content><![CDATA[<p>在windows下需要查看端口占用情况，同时排查哪些应用正在使用当前端口。</p>
<a id="more"></a>

<h3 id="1、打开命令行（管理员身份）"><a href="#1、打开命令行（管理员身份）" class="headerlink" title="1、打开命令行（管理员身份）"></a>1、打开命令行（管理员身份）</h3><p>1） 在开始菜单搜索<code>cmd</code>，右键点击<code>命令行提示窗口</code>以管理员身份运行；</p>
<p>2） 按快捷组合键<code>Ctrl+r</code>，输入<code>cmd</code>。</p>
<h3 id="2、查看所有端口"><a href="#2、查看所有端口" class="headerlink" title="2、查看所有端口"></a>2、查看所有端口</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netstat -ano</span><br></pre></td></tr></table></figure>
<p>每个地址后面显示的即端口号，最后一列表示对应的进程号PID。</p>
<p><img src="https://www.runoob.com/wp-content/uploads/2018/07/1530674518-5109-2159693-5342695777bde48d.png" alt=""></p>
<h3 id="3、查看具体端口使用的进程"><a href="#3、查看具体端口使用的进程" class="headerlink" title="3、查看具体端口使用的进程"></a>3、查看具体端口使用的进程</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netstat -aon|findstr <span class="string">"8081"</span></span><br></pre></td></tr></table></figure>
<p>显示使用当前端口的进程情况。</p>
<p><img src="https://www.runoob.com/wp-content/uploads/2018/07/1530674518-6203-2159693-10d9bae7a6e59b06.png" alt=""></p>
<h3 id="4、查看指定进程"><a href="#4、查看指定进程" class="headerlink" title="4、查看指定进程"></a>4、查看指定进程</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tasklist|findstr <span class="string">"9088"</span></span><br></pre></td></tr></table></figure>
<p>查看是哪个进程或者程序占用了 8081 端口，结果是：node.exe。</p>
<p><img src="https://www.runoob.com/wp-content/uploads/2018/07/1530674518-3794-2159693-30d1a50103f28cea.png" alt=""></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ol>
<li><a href="https://www.runoob.com/w3cnote/windows-finds-port-usage.html" target="_blank" rel="noopener">Windows下如何查看某个端口被谁占用</a></li>
</ol>
]]></content>
      <categories>
        <category>实用技巧</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>端口查看</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建个人博客(hexo+next+github）</title>
    <url>/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2.html</url>
    <content><![CDATA[<p>在经过多个教程摸索和尝试后，发现手把手有时候挺坑人的，毕竟经验还是要自己攒，不然没踩的坑迟早要踩到，最终我的个人博客<a href="https://linwhitehat.github.io/">Pikachu</a>搭建完成，这篇教程会从本地博客建立到实现美观的网络博客进行记录分享，这篇博客也就会随着本博客的每一次升级完善而补充，希望能给想自建博客的朋友们提供帮助。</p>
<a id="more"></a>

<h2 id="最初的诞生"><a href="#最初的诞生" class="headerlink" title="最初的诞生"></a>最初的诞生</h2><p>我采用的搭建博客的方式是使用 <a href="https://pages.github.com/" target="_blank" rel="noopener">GitHub Pages</a> + <a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a> 的方式，这个应该是我摸索之后认为的对新手最友好也最优质的方式，只需要投入时间学习和运营，就能拥有美观的个人博客。</p>
<ol>
<li>注册Github账号</li>
</ol>
<p>要使用 GitHub Pages，首先你要注册一个<a href="https://github.com/" target="_blank" rel="noopener">GitHub</a>账号。</p>
<p><img src="/images/blog-1.png" alt="GitHub注册页"></p>
<ol start="2">
<li>安装必备软件</li>
</ol>
<p>1) 安装<a href="https://git-scm.com/download/win" target="_blank" rel="noopener">Git</a>客户端</p>
<p>2) 安装<a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a></p>
<ol start="3">
<li>新建博客</li>
</ol>
<p>配置GitHub，步骤如下:</p>
<p>1) 登录GitHub后新建项目（new repository），项目名由两部分组成即GitHub账号名和固定后缀<code>.github.io</code>，比如我的项目就是<code>linwhitehat.github.io</code>，填写完点击创建项目（create repository）。</p>
<p>2) 配置GitHub SSH密钥，本地打开git bash，输入<code>ssh-keygen -t rsa -C &quot;your&#39;s emaill address&quot;</code>，其中your’s email address换成GitHub账号的邮箱地址，第一次点击回车键（Enter）会显示存储位置，第二次点击回车键会显示输入密钥，按照要求输入密钥两次(输入过程是看不到密钥的)，之后在第一次显示的存储位置打开文件id_rsa.pub，复制文件内所有内容，在GitHub中点击头像可看的setting选项，在setting选项中可看到SSH and GPG keys选项，点击new SSH，然后输入title（方便密钥管理的名字），将刚才复制的内容粘贴到key中。</p>
<p>3）创建本地仓库，在本地选择不包含中文的文件路径，新建一个文件夹，进入文件夹并点击右键选择git bash，输入以下命令进行设置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">git config --global user.name &quot;Your&#39;s name&quot;</span><br><span class="line">git config --global user.email &quot;Your&#39;s email address&quot;</span><br></pre></td></tr></table></figure>
<p>其中<code>Your&#39;s name</code>和<code>Your&#39;s email address</code>替换为GitHub账户名和对应邮箱地址。</p>
<p>4) 安装Hexo，按照之前方式进入git bash终端，输入<code>node</code>检测Node.js是否安装成功，若出现<code>&gt;</code>则表示正常，退出node模式，输入以下命令安装Hexo：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br><span class="line">hexo version</span><br></pre></td></tr></table></figure>
<p>看到输出版本号等信息表示安装Hexo成功，在当前新建的文件夹下新建一个hexo文件夹，在hexo文件夹中进入git bash，输入以下命令配置hexo，完成之后，在浏览器输入<code>http://localhost:4000</code>，正常则可看到初始化的博客，到此便完成本地博客的建立。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo init</span><br><span class="line">npm install</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>5）配置Hexo到GitHub，在hexo文件夹下存在一个配置文件<code>_config.yml</code>，打开后可看到文件最后部分为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line"> type:</span><br></pre></td></tr></table></figure>
<p>将其修改为以下内容，其中<code>yourname</code>为GitHub账号名：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:  </span><br><span class="line"> type: git</span><br><span class="line"> repository: http:&#x2F;&#x2F;github.com&#x2F;yourname&#x2F;yourname.github.io.git</span><br><span class="line"> branch: master</span><br></pre></td></tr></table></figure>
<p>保存后，在当前文件夹打开git bash并输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<p>若出现错误显示<code>ERROR Deployer not found: git</code>，则输入以下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<p>若弹出填写GitHub账号用户名和密码则正常填写，完成之后在浏览器输入<code>https://yourname.github.io</code>，yourname替换为GitHub账户名，即可通过互联网访问博客。</p>
<p>6）如果不想自己新建，可以使用现有的他人博客项目进行改建，见<a href="#Section4">第4小节</a>。</p>
<ol start="4">
<li><span id="Section4">使用已有的博客模板</span></li>
</ol>
<p>1) 注册完成后搜索 <code>linwhitehat.github.io</code> 进入<a href="https://github.com/linwhitehat/linwhitehat.github.io" target="_blank" rel="noopener">我的仓库</a></p>
<p><img src="/images/blog-2.png" alt=""></p>
<p>点击右上角的 <strong>Fork</strong> 将我的仓库拉倒你的账号下</p>
<p>稍等一下，点击刷新，你会看到<strong>Fork</strong>了成功的页面</p>
<p><img src="/images/blog-3.png" alt=""></p>
<p>2) 修改仓库名</p>
<p>点击<strong>settings</strong>进入设置</p>
<p><img src="/images/blog-4.png" alt=""></p>
<p id = "Rename"></p>
修改仓库名为 `你的Github账号名.github.io`，然后 Rename

<p><img src="/images/blog-5.png" alt=""></p>
<p>这时你在在浏览器中输入 <code>你的Github账号名.github.io</code> 例如:<code>linwhitehat.github.io</code></p>
<p>你将会看到如下界面</p>
<p><img src="/images/blog-6.png" alt=""></p>
<p>说明已经成功一半了😀当然，还需要修改博客的配置才能变成你的博客。</p>
<p>若是出现</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2178672-cfd55a22902a9d2c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>则需要 <a href="#Rename">检查一下你的仓库名是否正确</a></p>
<ol start="5">
<li>修改博客配置</li>
</ol>
<p>来到你的仓库，找到<code>_config.yml</code>文件,这是网站的全局配置文件。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2178672-c23d4a5d67c88084.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>点击修改</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2178672-b37268df7a7852ca.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>然后编辑<code>_config.yml</code>的内容</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2178672-0c8750f5a18dbe03.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>接下来我们来详细说说以下配置文件的内容：</p>
<ol start="6">
<li><p>基础设置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Site settings</span><br><span class="line">title: Your Blog    				  	#你博客的标题</span><br><span class="line">SEOTitle: 你的博客 | Your Blog    	 #显示在浏览器上搜索的时候显示的标题</span><br><span class="line">header-img: img&#x2F;post-bg-rwd.jpg  	#显示在首页的背景图片</span><br><span class="line">email: You@gmail.com	</span><br><span class="line">description: &quot;You Blog&quot;  			 #网站介绍</span><br><span class="line">keyword: &quot;BY, BY Blog, 柏荧的博客, qiubaiying, 邱柏荧, iOS, Apple, iPhone&quot; #关键词</span><br><span class="line">url: &quot;https:&#x2F;&#x2F;qiubaiying.github.io&quot;          # 这个就是填写你的博客地址</span><br><span class="line">baseurl: &quot;&quot;      # 这个我们不用填写</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>至此，一个初具形态的博客便生成了。</p>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ol>
<li>本文中新建仓库建立博客的方式，在本地建立仓库后，又再新建一个hexo文件，且将hexo配置托管到GitHub之后，GitHub项目便被hexo文件夹下的<code>.deploy_git</code>覆盖，之后修改博客维护项目只需要在hexo文件夹下的git bash进行hexo处理即可。</li>
<li>Hexo卸载方式，在git bash执行以下命令：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-cli -g</span><br><span class="line">npm uninstall hexo -g</span><br></pre></td></tr></table></figure>
<p>博客相应的文件目录需要手动删除。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="https://www.jianshu.com/p/956c44c87fb1" target="_blank" rel="noopener">博客雏形安装</a></li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>LaTeX-Windows10安装教程</title>
    <url>/LaTeX%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B.html</url>
    <content><![CDATA[<p>作为一名研究僧，写论文，写文档，写日志，写报告，写书……还是比较平常的一件事，而office系列对于排版要求严格又惜时如金的人而言还是次选，所以开始入坑LaTeX，经过慎重的调研之后，选择了texlive+texstudio的形式开始入坑，当然还有很多其他选择，如果写完这篇还记得会在参考链接下附上。</p>
<a id="more"></a>

<h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul>
<li>调研选择</li>
<li>下载</li>
<li>安装</li>
<li>配置</li>
<li>第一篇tex文档</li>
<li>更多LaTeX学习资料</li>
</ul>
<h2 id="调研选择"><a href="#调研选择" class="headerlink" title="调研选择"></a>调研选择</h2><p>其实这部分只是自己做一点记录，急需安装教程的请跳过，请看第2节。</p>
<p>经过多番Google、csdn以及知乎的查阅，大概了解了latex的编译环境和编辑环境，主流的有ctex、texlive、texstudio+winedt等等，我的选择变化大致如下：</p>
<ol>
<li><p>在上过的一门算法课中老师推荐了跨平台下的latex集成工具，ctex被建议在windows下使用，所以最初我的选择是ctex，附上清华镜像，<a href="https://mirrors.tuna.tsinghua.edu.cn/ctex/legacy/2.9/" target="_blank" rel="noopener" title="ctex清华镜像">Ctex-mirror</a>，官方网站<a href="http://www.ctex.org/HomePage" target="_blank" rel="noopener">CTeX</a>，加上ctex对中文的支持很好，且集成工具完整，当下载3G的安装包时，我又调研了不少教程，但是在某csdn的教程中看的评论有人评价ctex已不维护很久，同时ctex安装后会对系统环境变量进行覆盖，想想这个风险还是挺大的，毕竟安装需要配置换件变量的应用还挺多的，这篇<a href="https://liam.page/texlive/" target="_blank" rel="noopener">博文</a>有说明，接着看到在不少教程中推荐texlive（可谓官方），这是由 TUG (TeX User Group) 维护和发布的tex系统，接着有了第2个选择；</p>
</li>
<li><p>开始调研texlive，看看官网<a href="https://tug.org/texlive/" target="_blank" rel="noopener" title="texlive">TexLive</a>，维护还是比较好的，有2019最新版本，有多国镜像，有完整教学文档，感觉比ctex完善很多，果断放弃ctex，尽管这个时候安装文件也下载得差不多了，同时看到texstudio是tex编辑的不错的集成环境，官方的介绍是这样的：</p>
</li>
</ol>
<p><em>TeXstudio is an integrated writing environment for creating LaTeX documents. Our goal is to make writing LaTeX as easy and comfortable as possible. Therefore TeXstudio has numerous features like syntax-highlighting, integrated viewer, reference checking and various assistants.</em></p>
<p>安装提供zip压缩包直接解压使用，很适合我这种不喜欢安装包的人，因为便于迁移，抉择已定，开始下载和安装。</p>
<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><blockquote>
<p>先提供需要安装的文件（texlive和texstudio）的<a href="https://pan.baidu.com/s/1mRKV0VeNfjxhY6qGvSQdLw" target="_blank" rel="noopener" title="网盘链接">网盘链接</a>，提取码：uhbe </p>
</blockquote>
<p>官方提供了下载方式：</p>
<ol>
<li>texlive，<a href="https://mirror.bjtu.edu.cn/ctan/systems/texlive/Images/texlive2019.iso" target="_blank" rel="noopener">官方镜像</a>，如果访问不了，可以访问国内镜像，如<a href="http://mirrors.ustc.edu.cn/CTAN/systems/texlive/" target="_blank" rel="noopener">中科大镜像</a>；</li>
<li>texstudio，我选择的是zip压缩文件形式，<a href="https://github.com/texstudio-org/texstudio/releases/download/2.12.16/texstudio-2.12.16-win-portable-qt5.zip" target="_blank" rel="noopener">下载</a>；</li>
</ol>
<p>当然也可以直接下载我网盘分享的镜像和安装包，可以使用官方提供的md5值进行比对验证文件没有被篡改。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h4 id="TexLive-安装"><a href="#TexLive-安装" class="headerlink" title="TexLive 安装"></a>TexLive 安装</h4><p>下载好iso文件之后，由于我是win10系统，可以直接加载iso镜像文件，因此双击打开即可，如果是win7及以前的版本需要先解压iso文件，双击打开install-tl-advanced.bat文件，会出现以下界面：</p>
<p><img src="/images/post-texlive-install-1.jpg" alt="安装启动界面"></p>
<p>点击<em>修改</em>更换需要安装的文件路径，路径建议不要带有中文和特殊字符；<br>点击<em>Advanced</em>修改安装选项，但默认是所有都选上，所以可以不用修改（因为涉及调用的宏包以及scheme选择，如果不了解还是默认，避免后续麻烦）；<br>点击<em>安装</em>，然后就是漫长的安装过程，安装期间可以做自己的事情，安装完成后显示如下：</p>
<p><img src="/images/post-texlive-install-2.jpg" alt="安装完成界面"></p>
<p>做一下安装是否成功的检查：</p>
<ol>
<li><p>在开始菜单中搜索<em>TeX Live command-line</em>，执行以下命令：</p>
<p> <code>xelatex -v</code></p>
</li>
</ol>
<p>如果正常会显示如下信息，即正常的texlive版本号：</p>
<p><img src="/images/post-texlive-test-1.jpg" alt="测试正常界面"></p>
<p>如果显示错误如下，应该是系统环境变量的问题，进入系统环境变量（系统属性-&gt;高级系统设置-&gt;环境变量），将<em>Path</em>环境变量新增texlive进去，即将安装好的texlive文件目录下的bin文件夹所在的路径作为环境变量。</p>
<p><img src="/images/post-texlive-test-2.jpg" alt="测试错误界面"></p>
<h4 id="TexStudio-安装"><a href="#TexStudio-安装" class="headerlink" title="TexStudio 安装"></a>TexStudio 安装</h4><p>下载好zip压缩文件之后，直接解压就可以使用，十分方便！</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>主要是texstudio需要进行配置，更适合国内人士使用。</p>
<h4 id="语言设置"><a href="#语言设置" class="headerlink" title="语言设置"></a>语言设置</h4><p>打开texstudio之后，在主界面中显示的是英文，点击菜单栏的<em>Options</em>，点击<em>Configure TeXstudio</em>，在<em>General</em>选项下将<em>Language</em>选择为<em>zh_CN</em>，点击确定；</p>
<h4 id="编译环境设置"><a href="#编译环境设置" class="headerlink" title="编译环境设置"></a>编译环境设置</h4><p>在语言设置一样的窗口，此时显示语言是中文，点击<em>构建</em>-&gt;<em>默认编译器<em>设置为”XeLaTeX”，支持中文LaTeX文档；<br>将</em>构建</em>-&gt;<em>默认文献工具<em>设置为”Biber”；<br>在</em>命令</em>-&gt;<em>XeLaTeX</em>设置编译参数，使用 -shell-escape 参数以支持“minted”代码排版宏包；</p>
<p>点击<em>构建</em>-&gt;<em>默认编译器<em>设置为”Latexmk”实现一次性编译；<br>将</em>命令</em>-&gt;<em>Latexmk<em>的 -pdf 参数修改为 -xelatex 以支持中文；<br>在</em>命令</em>-&gt;<em>Latexmk</em>设置编译参数，使用 -shell-escape 参数以支持“minted”代码排版宏包；<br>点击确定</p>
<p>点击菜单栏<em>帮助</em>-&gt;<em>检查Latex安装信息</em>，若正确输出系统报告，说明texlive正常工作。</p>
<h2 id="第一篇tex文档"><a href="#第一篇tex文档" class="headerlink" title="第一篇tex文档"></a>第一篇tex文档</h2><p>参照这篇博客，<a href="https://blog.csdn.net/yeler082/article/details/80665186" target="_blank" rel="noopener">Texlive+TeXstudio 入门安装使用</a>，照着输入，然后点击两个绿色箭头重叠的按钮，可以看到实时生成的文档。</p>
<h2 id="更多LaTeX学习资料"><a href="#更多LaTeX学习资料" class="headerlink" title="更多LaTeX学习资料"></a>更多LaTeX学习资料</h2><ol>
<li><a href="https://www.cnblogs.com/joyeecheung/p/3596255.html" target="_blank" rel="noopener">TeX Live &amp; TeXstudio 安装手记</a></li>
<li><a href="http://www.ctex.org/OnlineDocuments" target="_blank" rel="noopener">第一篇tex文档编写</a></li>
</ol>
]]></content>
      <categories>
        <category>写作</category>
      </categories>
      <tags>
        <tag>Latex</tag>
      </tags>
  </entry>
</search>
