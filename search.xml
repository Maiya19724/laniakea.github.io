<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>博客优化(Hexo博客Next主题自定义设计)</title>
    <url>/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>博客搭建完成后，最初的博客雏形一般都比较朴素，功能也有限，所以可以通过优化主题来进行美化博客外观和拓展博客功能。本篇文章主要以可正常访问的Hexo.Mist原型博客为基础，根据自身需求加以优化，而最新版（V7.7）中其实包含很多美化设置，但是默认是关闭状态，同时个性化配置需要修改配置文件等，即使出现一个字母的差错也会导致失效，因此本文对配置文件会具体说明，而目录均是按照我的博客搭建博文中说明的目录结构，可以根据自身目录结构进行转换，博文中展示的图片可能来自参考文章，若参考文章内容与实际存在差异会附上实际图片。</p>
<a id="more"></a>

<h2 id="优化主题"><a href="#优化主题" class="headerlink" title="优化主题"></a>优化主题</h2><p>我的个人博客是<a href="https://linwhitehat.github.io/">林深时见璐</a>，本文优化的效果可以访问博客进行观看。</p>
<h3 id="阅读全文设置"><a href="#阅读全文设置" class="headerlink" title="阅读全文设置"></a>阅读全文设置</h3><p>由于初始博客并没有设置摘要的形式，因此博客首页会展示每篇博文的全文，显得十分冗长，为此设置<code>阅读全文</code>能简化博客首页，且让博文能以简短的摘要进行展示。<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[设置阅读全文](https://www.jianshu.com/p/78c218f9d1e7)
">[1]</span></a></sup></p>
<p>设置方法采用的是在博文中选择适当位置进行内容截断，填写以下内容：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- more --&gt;</span></span><br></pre></td></tr></table></figure>

<p>这样首页便只会展示在截断位置前的内容。</p>
<h3 id="分类板块二级目录显示"><a href="#分类板块二级目录显示" class="headerlink" title="分类板块二级目录显示"></a><code>分类板块</code>二级目录显示</h3><p>在类别模块，往往只显示一种类别，但有时候博客之间归属一大类却各有差异，因此设计二级分类目录，使得类别简洁的同时又能将具体博文区别。因为Hexo原生支持父子分类，在博文撰写的<code>md</code>文件首部<code>categories</code>下原先的类别A下再写一个类别B，即可得到父子类的效果，A为父类，B为子类，示例如下<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[分类二级目录](https://hexo.io/zh-cn/docs/front-matter.html)
">[2]</span></a></sup>：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">categories:</span><br><span class="line"><span class="deletion">- 技术</span></span><br><span class="line"><span class="deletion">- 博客搭建</span></span><br></pre></td></tr></table></figure>

<h3 id="评论系统使用utteranc"><a href="#评论系统使用utteranc" class="headerlink" title="评论系统使用utteranc"></a>评论系统使用<code>utteranc</code></h3><p>原先使用的是主题自带的<code>gitalk</code>作为博客评论系统，而更改为<code>utteranc</code>的原因有两个：<br>1）<code>gitalk</code>存在原始配置泄露及访问授权等<a href="https://github.com/gitalk/gitalk/issues/343" target="_blank" rel="noopener" title="https://github.com/gitalk/gitalk/issues/343">问题</a>，<code>utteranc</code>具备细粒度的权限控制，且接受隐私项目授权；<br>2）二者都是基于GitHub的issue系统进行评论，很好转换。</p>
<p>转换评论系统首先将<code>gitalk</code>在<code>../next/_config.yml</code>中设置为<code>false</code>，将GitHub中授权的应用删除。安装<code>utteranc</code>步骤如下<sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[评论系统](https://wangjiezhe.com/posts/2018-10-29-Hexo-NexT-3/)
">[3]</span></a></sup>：<br>1）在GitHub APP中安装<code>utterances</code>，链接为<a href="https://github.com/apps/utterances" target="_blank" rel="noopener">https://github.com/apps/utterances</a>，安装后如图：<br><img src="https://wangjiezhe.com/posts/2018-10-29-Hexo-NexT-3/5bd723ae73cb3.webp" alt="utterance应用安装"><i class="img-caption">◎ utterance应用安装</i><br>2）安装插件，在hexo文件目录下打开<code>git bash</code>，安装如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install theme-next/hexo-next-utteranc</span><br></pre></td></tr></table></figure>
<p>3）在<code>../next/layout/_third-party/comments/</code>中新建文件<code>utterances.swig</code>，写入以下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% if theme.utteranc.enable %&#125;</span><br><span class="line">  &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;utteranc.es&#x2F;client.js&quot;</span><br><span class="line">    repo&#x3D;&quot;&#123;&#123; theme.utteranc.repo &#125;&#125;&quot;</span><br><span class="line">    issue-term&#x3D;&quot;&#123;&#123; theme.utteranc.issue_term &#125;&#125;&quot;</span><br><span class="line">    theme&#x3D;&quot;&#123;&#123; theme.utteranc.theme &#125;&#125;&quot;</span><br><span class="line">    crossorigin&#x3D;&quot;anonymous&quot;</span><br><span class="line">    async&gt;</span><br><span class="line">  &lt;&#x2F;script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>
<p>4）在<code>../next/layout/_partials/comments.swig</code>中找到最后一句<code>elseif</code>并在其中的<code>&lt;div&gt;&lt;/div&gt;</code>后面增添以下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% elseif theme.utteranc.enable %&#125;</span><br><span class="line">      &lt;div class&#x3D;&quot;comments&quot; id&#x3D;&quot;comments&quot;&gt;</span><br><span class="line">        &#123;% include &#39;..&#x2F;_third-party&#x2F;comments&#x2F;utterances.swig&#39; %&#125;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>
<p>5）在<code>../next/_config.yml</code>添加下面的配置内容：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Demo: https://utteranc.es/  http://trumandu.github.io/about/</span></span><br><span class="line"><span class="attr">utteranc:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">linwhitehat/linwhitehat.github.io</span></span><br><span class="line">  <span class="attr">pathname:</span> <span class="string">pathname</span></span><br><span class="line">  <span class="comment"># theme: github-light,github-dark,github-dark-orange</span></span><br><span class="line">  <span class="attr">theme:</span> <span class="string">github-light</span></span><br><span class="line">  <span class="attr">cdn:</span> <span class="string">https://utteranc.es/client.js</span></span><br><span class="line">  <span class="comment"># If you want to modify priority, please config in **hexo**</span></span><br><span class="line">  <span class="comment">#priority:</span></span><br></pre></td></tr></table></figure>
<p>更新完博客配置后，便能看到之前使用gitalk留下的评论，同时也能发表新评论。</p>
<h3 id="博客文段效果"><a href="#博客文段效果" class="headerlink" title="博客文段效果"></a>博客文段效果</h3><p>1）首字下沉<br>2）段首缩进</p>
<h3 id="图片设置"><a href="#图片设置" class="headerlink" title="图片设置"></a>图片设置</h3><ol>
<li>图片放大查看的功能，这是默认功能，可以选择使用的插件<code>fancybox</code>或<code>mediumzoom</code>，我使用后者，在<code>../next/_config.yml</code>中搜索<code>mediumzoom</code>，将<code>false</code>改为<code>true</code>。</li>
<li>图片标题说明，当前的配置情况下，即使使用下面展示的markdown语法中的图片说明也无法正常显示在博客中，其中<code>Optional title</code>是图片的title属性，若使用Next主题中的<code>fancybox</code>插件则自动会显示，其他的配置则需要更改Hexo渲染组件。<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">Alt text</span>](<span class="link">../img.jpg "Optional title"</span>)</span><br></pre></td></tr></table></figure>
修改渲染配置步骤如下：<br>1）在<code>../hexo/node_modules/marked/lib/marked.js</code>中进行下述修改，其中<code>-</code>表示删除<code>+</code>表示增加：<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">Renderer.prototype.image = function(href, title, text) &#123;</span><br><span class="line"><span class="deletion">- href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);</span></span><br><span class="line"><span class="deletion">- if (href === null) &#123;</span></span><br><span class="line"><span class="deletion">-   return text;</span></span><br><span class="line"><span class="deletion">-&#125;</span></span><br><span class="line"><span class="addition">+ if (this.options.baseUrl &amp;&amp; !originIndependentUrl.test(href)) &#123;</span></span><br><span class="line"><span class="addition">+   href = resolveUrl(this.options.baseUrl, href);</span></span><br><span class="line"><span class="addition">+ &#125;</span></span><br><span class="line"><span class="addition">+ var out = '&lt;img src="' + href + '" alt="' + text + '"';</span></span><br><span class="line">  if (title) &#123;</span><br><span class="line"><span class="deletion">-   out += ' title="' + title + '"';</span></span><br><span class="line"><span class="addition">+   out += '&gt;' + '&lt;i class="img-caption"&gt;' + '◎ ' + title + '&lt;/i';</span></span><br><span class="line">  &#125;</span><br><span class="line">  out += this.options.xhtml ? '/&gt;' : '&gt;';</span><br><span class="line">  return out;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
2）增加自定义CSS样式，在<code>../source/_data/styles.styl</code>中增加以下内容：<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.img-caption</span> &#123;</span><br><span class="line">    <span class="attribute">font-style</span>: normal;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0</span> .<span class="number">7em</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">90%</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#555</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">text-indent</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">font-family</span>: STKaiti, serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>图片居中<sup id="fnref:4"><a href="#fn:4" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[图片居中设置](https://blog.singee.me/2017/12/07/mist-img-center/)
">[4]</span></a></sup></li>
</ol>
<p>在<code>../next/source/css/_schemes/Mist/_posts-expanded.styl</code>中找到<code>.posts-expand</code>中的下列内容：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.post-body</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>将其修改为：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.post-body</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h3 id="博文脚注"><a href="#博文脚注" class="headerlink" title="博文脚注"></a>博文脚注</h3><p>脚注也可以叫注脚，Hexo自带的默认markdown编辑器渲染效果不支持脚注的显示，因此安装插件进行渲染支持，我使用的是<a href="https://github.com/kchen0x/hexo-reference" target="_blank" rel="noopener" title="https://github.com/kchen0x/hexo-reference">hexo-reference</a>，整体效果更可观，安装如下<sup id="fnref:5"><a href="#fn:5" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[插入脚注](https://guanqr.com/study/blog/hexo-theme-next-customization/)
">[5]</span></a></sup><sup id="fnref:6"><a href="#fn:6" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[注脚选择](https://benzblog.site/2019-07-12-HexoTricks/)
">[6]</span></a></sup>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-reference --save</span><br></pre></td></tr></table></figure>
<p>在博客撰写的md文件中使用如下（<code>^</code>和数字之间不需要空格）：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">博客脚注[^ 1]。</span><br><span class="line">[<span class="symbol">^ 1</span>]: <span class="link">我的博客。</span></span><br></pre></td></tr></table></figure>

<h3 id="修改篇尾的标签符号"><a href="#修改篇尾的标签符号" class="headerlink" title="修改篇尾的标签符号"></a>修改篇尾的标签符号</h3><p>默认的标签符号是<code>#</code>，可以使用自带的标签图案，修改方式即在<code>../next/_config.yml</code>中将<code>tag_icon</code>更改为<code>true</code>。<br><img src="https://i.imgur.com/LVHYdOp.png" alt="old_tag"><i class="img-caption">◎ old_tag</i><br><img src="https://i.imgur.com/KVFYpSF.png" alt="new_tag"><i class="img-caption">◎ new_tag</i></p>
<h3 id="修改分割线"><a href="#修改分割线" class="headerlink" title="修改分割线"></a>修改分割线</h3><p>原先的默认分割线是虚线，将其修改为实线，在<code>../next/source/css/_common/scaffolding/base.styl</code>中将下属配置删除<sup id="fnref:7"><a href="#fn:7" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[分割线样式修改](https://blog.bill.moe/hexo-theme-next-config-optimization/)
">[7]</span></a></sup>：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">background-image</span>: <span class="selector-tag">repeating-linear-gradient</span>(<span class="selector-tag">-45deg</span>, <span class="selector-tag">white</span>, <span class="selector-tag">white</span> 4<span class="selector-tag">px</span>, <span class="selector-tag">transparent</span> 4<span class="selector-tag">px</span>, <span class="selector-tag">transparent</span> 8<span class="selector-tag">px</span>);</span><br></pre></td></tr></table></figure>

<h3 id="页脚显示博客运行时间"><a href="#页脚显示博客运行时间" class="headerlink" title="页脚显示博客运行时间"></a>页脚显示博客运行时间</h3><p>在博客页脚显示博客运行时间<sup id="fnref:8"><a href="#fn:8" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[页脚显示博客运行时间](http://eternalzttz.com/hexo-next.html)
">[8]</span></a></sup>，这个在默认主题配置中并没有，因此需要自己添加，修改配置文件是<code>../next/layout/_partials/footer.swig</code>，在配置文件中找到你想显示在博客页脚的位置，比如我配置在主题版本信息下，显示效果如图：<br><img src="/images/run_time_result.png" alt="博客运行时间"><i class="img-caption">◎ 博客运行时间显示效果</i><br>不同配置位置可以自行尝试修改，具体添加代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;days&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">function show_date_time()&#123;</span><br><span class="line">    window.setTimeout(&quot;show_date_time()&quot;, 1000);</span><br><span class="line">    BirthDay&#x3D;new Date(&quot;01&#x2F;10&#x2F;2019 00:13:14&quot;);&#x2F;&#x2F;修改为自己的blog建站时间</span><br><span class="line">    today&#x3D;new Date();</span><br><span class="line">    timeold&#x3D;(today.getTime()-BirthDay.getTime());</span><br><span class="line">    sectimeold&#x3D;timeold&#x2F;1000</span><br><span class="line">    secondsold&#x3D;Math.floor(sectimeold);</span><br><span class="line">    msPerDay&#x3D;24*60*60*1000</span><br><span class="line">    e_daysold&#x3D;timeold&#x2F;msPerDay</span><br><span class="line">    daysold&#x3D;Math.floor(e_daysold);</span><br><span class="line">    e_hrsold&#x3D;(e_daysold-daysold)*24;</span><br><span class="line">    hrsold&#x3D;setzero(Math.floor(e_hrsold));</span><br><span class="line">    e_minsold&#x3D;(e_hrsold-hrsold)*60;</span><br><span class="line">    minsold&#x3D;setzero(Math.floor((e_hrsold-hrsold)*60));</span><br><span class="line">    seconds&#x3D;setzero(Math.floor((e_minsold-minsold)*60));</span><br><span class="line">    document.getElementById(&#39;days&#39;).innerHTML&#x3D;&quot;本站已安全运行&quot;+daysold+&quot;天&quot;+hrsold+&quot;小时&quot;+minsold+&quot;分&quot;+seconds+&quot;秒&quot;;</span><br><span class="line">&#125;</span><br><span class="line">function setzero(i)&#123;</span><br><span class="line">    if (i&lt;10)</span><br><span class="line">    &#123;i&#x3D;&quot;0&quot; + i&#125;;</span><br><span class="line">    return i;</span><br><span class="line">&#125;</span><br><span class="line">show_date_time();</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="显示博客阅读数量"><a href="#显示博客阅读数量" class="headerlink" title="显示博客阅读数量"></a>显示博客阅读数量</h3><p>已经有许多教程，在博客主题配置中也有多种选择，根据网上教程的介绍，busuanzi插件只能在博文显示阅读数，因此我选择部署LeanCloud插件来显示阅读数，但是在部署过程中遇到不少问题，而且没有在任何教程中找到完整的说明，尽管网上也有可行的教程<sup id="fnref:9"><a href="#fn:9" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[部署LeanCloud显示阅读数量](https://yunhao.space/2018/06/27/hexo-leancloud-plugin-installation-tutor/)
">[9]</span></a></sup>，我还是记录下来。</p>
<h4 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h4><p>在<a href="https://www.leancloud.cn/" target="_blank" rel="noopener">LeanCloud</a>官网中进行注册并登录。</p>
<h4 id="应用配置"><a href="#应用配置" class="headerlink" title="应用配置"></a>应用配置</h4><p>进入控制台之后，点击<code>创建应用</code>，填写应用名称，<code>计价方案</code>选择开发版，创建成功之后，在对应应用右上角点击齿轮状的设置，如图：<br><img src="https://raw.githubusercontent.com/lmnsyunhao/blog-pica/master/hexo-leancloud-plugin-installation-tutor/3.png" alt="LeanCloud应用设置"><i class="img-caption">◎ LeanCloud应用设置</i><br>在设置界面，选择<code>存储</code>，选择<code>创建Class</code>，<code>Class名称</code>输入<code>Counter</code>，因为这个类名与Next主题兼容，默认ACL权限设置为<code>无限制</code>即所有用户可读可写。<br>在设置界面，选择<code>设置</code>，选择<code>应用Keys</code>，将界面显示的<code>AppID</code>和<code>AppKey</code>复制，在主题配置文件修改时需要使用。<br>在上述的<code>设置</code>选项下选择<code>安全中心</code>，在<code>Web安全域名</code>的填写框中输入博客的完整域名，保证统计数据只在记录的域名中有效。</p>
<h4 id="博客配置"><a href="#博客配置" class="headerlink" title="博客配置"></a>博客配置</h4><p>在博客的<code>../next/_config.yml</code>配置文件中，找到<code>leancloud_visitors</code>，设置配置信息如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Show number of visitors to each article.</span></span><br><span class="line"><span class="comment"># You can visit https://leancloud.cn get AppID and AppKey.</span></span><br><span class="line"><span class="attr">leancloud_visitors:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">app_id:</span> </span><br><span class="line">  <span class="attr">app_key:</span> </span><br><span class="line">  <span class="comment"># Dependencies: https://github.com/theme-next/hexo-leancloud-counter-security</span></span><br><span class="line">  <span class="comment"># If you don't care about security in lc counter and just want to use it directly</span></span><br><span class="line">  <span class="comment"># (without hexo-leancloud-counter-security plugin), set the `security` to `false`.</span></span><br><span class="line">  <span class="attr">security:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">betterPerformance:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p><code>app_id</code>处填写应用配置时复制的<code>AppID</code>，<code>app_key</code>填写应用配置时复制的<code>AppKey</code>。</p>
<h4 id="安全插件安装及部署"><a href="#安全插件安装及部署" class="headerlink" title="安全插件安装及部署"></a>安全插件安装及部署</h4><p>如果上述配置完成后，更新部署博客，能够正常显示阅读数量，后续的内容可以选择跳过。<br>如果上述配置不能正常显示阅读数量，且存在<code>Counter not initialized! See more at console err msg.</code>的问题，此时在博客页面打开控制台（Chrome下按<code>F12</code>或右键选择<code>检查</code>），点击<code>Console</code>查看是否存在下图显示内容：<br><img src="https://raw.githubusercontent.com/lmnsyunhao/blog-pica/master/hexo-leancloud-plugin-installation-tutor/8.png" alt="Count类未初始化问题"><i class="img-caption">◎ Count类未初始化问题</i><br>这是因为LeanCloud插件存在安全问题，需要安装另一个插件<code>hexo-leancloud-counter-security</code>进行完善。<br>首先在<code>../next/_config.yml</code>主题配置文件中的<code>leancloud_visitors</code>找到<code>security</code>选项，将其改为<code>true</code>，同时确认同一配置文件下的<code>valine</code>部分的<code>enable</code>和<code>visitor</code>是<code>false</code>，因为这两者会产生冲突，如果使用<code>valine</code>作为评论系统，可以参照网上教程进行冲突解决。<br>然后在博客根目录下打开<code>git bash</code>或<code>CMD</code>，安装插件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-leancloud-counter-security --save</span><br></pre></td></tr></table></figure>
<p>由于插件存在依赖性，出现<code>Error: Cannot find module &#39;babel-runtime/regenerator&#39;</code>错误时需要再安装模块<code>babel-runtime</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install babel-runtime --save</span><br></pre></td></tr></table></figure>
<p>安装完成之后，注册用户，其中<code>用户名</code>和<code>密码</code>替换为你要设置的用户名和密码内容（不需要和LeanCloud的登陆名和登陆密码一样）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo lc-counter r 用户名 密码</span><br></pre></td></tr></table></figure>
<p>之后修改博客配置文件<code>../hexo/_config.yml</code>，添加以下内容（所有选项都必须填写，此处的<code>username</code>和<code>password</code>即刚刚注册的用户名和密码，网上有教程认为此处空白可等部署时输入，但我部署时会因为配置缺少导致出错，所以建议配置中直接写入），否则部署时会报错<code>TypeError: Cannot read property ‘enable_sync’ of undefined</code>：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">leancloud_counter_security:</span></span><br><span class="line">  <span class="attr">enable_sync:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">app_id:</span> <span class="string">&lt;&lt;your</span> <span class="string">app</span> <span class="string">id&gt;&gt;</span></span><br><span class="line">  <span class="attr">app_key:</span> <span class="string">&lt;&lt;your</span> <span class="string">app</span> <span class="string">key&gt;</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">&lt;&lt;your</span> <span class="string">username&gt;&gt;</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">&lt;&lt;your</span> <span class="string">password&gt;&gt;</span></span><br></pre></td></tr></table></figure>
<p>之后在同一配置文件下的<code>deploy</code>部分，做以下修改：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="bullet">-</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/username/username.github.io</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line"><span class="bullet">-</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">leancloud_counter_security_sync</span></span><br></pre></td></tr></table></figure>
<p>由于搭建博客时已经部署到GitHub，要同时部署git和leancloud需要在配置文件中写清楚，其中git部分的<code>username</code>是对应博客的GitHub用户名，可参照我的博客<a href="https://linwhitehat.github.io/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2.html">搭建个人博客(hexo+next+github）</a>中的说明。<br>完成插件安装和配置修改后，到LeanCloud的应用中查看<code>存储</code>下的<code>_User</code>项，是否已经添加刚刚注册的用户，如图：<br><img src="https://raw.githubusercontent.com/lmnsyunhao/blog-pica/master/hexo-leancloud-plugin-installation-tutor/9.png" alt="LeanCloud用户查看"><i class="img-caption">◎ LeanCloud用户查看</i><br>存在用户后，查看<code>Counter</code>项，对表权限进行修改，点击<code>Counter</code>，选择<code>权限</code>，点击<code>修改</code>，分别修改<code>add_fields</code>、<code>create</code>和<code>delete</code>。<br><img src="/images/LeanCloud_Counter.png" alt="Counter权限修改"><i class="img-caption">◎ Counter权限修改</i><br><code>add_fields</code>和<code>create</code>两项的修改步骤一致：<br>1）选择<code>指定用户</code><br>2）输入已注册的用户名，添加<br><img src="https://raw.githubusercontent.com/lmnsyunhao/blog-pica/master/hexo-leancloud-plugin-installation-tutor/11.png" alt="添加用户"><i class="img-caption">◎ 添加用户</i><br>3）查看已添加用户正常显示<br><img src="https://raw.githubusercontent.com/lmnsyunhao/blog-pica/master/hexo-leancloud-plugin-installation-tutor/12.png" alt="用户添加成功效果"><i class="img-caption">◎ 用户添加成功效果</i><br>对于<code>delete</code>项，只保留上述第一个步骤即可，不需要添加用户。<br>如果希望保护访问数据不被篡改，可以选择<code>云引擎</code>，选择<code>部署</code>，选择<code>在线编辑</code>，点击<code>创建函数</code>，选项依次选择<code>Hook</code>、<code>beforeUpdate</code>和<code>Counter</code>，在函数中添加以下内容：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> query = <span class="keyword">new</span> AV.Query(<span class="string">"Counter"</span>);</span><br><span class="line"><span class="keyword">if</span> (request.object.updatedKeys.indexOf(<span class="string">'time'</span>) !== -<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> query.get(request.object.id).then(function (obj) &#123;</span><br><span class="line">        <span class="keyword">if</span> (obj.get(<span class="string">"time"</span>) + <span class="number">1</span> !== request.object.get(<span class="string">"time"</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AV.Cloud.Error(<span class="string">'Invalid update!'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/lmnsyunhao/blog-pica/master/hexo-leancloud-plugin-installation-tutor/18.png" alt="云引擎设置内容"><i class="img-caption">◎ 云引擎设置内容</i><br>保存上述设置之后，可看到添加的函数，点击<code>部署</code>，等待部署完成即可。<br><img src="https://raw.githubusercontent.com/lmnsyunhao/blog-pica/master/hexo-leancloud-plugin-installation-tutor/21.png" alt="部署完成日志"><i class="img-caption">◎ 部署完成日志</i></p>
<h4 id="修改lean-analytics-swig配置"><a href="#修改lean-analytics-swig配置" class="headerlink" title="修改lean-analytics.swig配置"></a>修改lean-analytics.swig配置</h4><p>如果上述配置完成后正常显示阅读数可跳过这部分，若出现阅读数不正常且显示为0，可参照此部分<sup id="fnref:10"><a href="#fn:10" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Next主题无法获取Leancloud阅读次数的问题](https://wangyi.blog/2019/12/24/Next主题无法获取Leancloud阅读次数的问题/)">[10]</span></a></sup>，原因可能是LeanCloud接口出现变化。对<code>..\next\layout_third-party\statistics\lean-analytics.swig</code>做以下修改：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"># 修改第13行，-表示删除，+表示添加</span><br><span class="line"><span class="deletion">- Counter('get', `/classes/Counter?where=$&#123;JSON.stringify(&#123; url &#125;)&#125;`)</span></span><br><span class="line"><span class="addition">+ Counter('get', `/classes/Counter?where=$&#123;encodeURIComponent(JSON.stringify(&#123; url &#125;))&#125;&amp;limit=1`)</span></span><br><span class="line"></span><br><span class="line"># 修改第58行</span><br><span class="line"><span class="deletion">- Counter('get', `/classes/Counter?where=$&#123;JSON.stringify(&#123; url: &#123; '$in': entries &#125; &#125;)&#125;`)</span></span><br><span class="line"><span class="addition">+ Counter('get', `?where=$&#123;encodeURIComponent(JSON.stringify(&#123; url: &#123; '$in': entries &#125; &#125;))&#125;`)</span></span><br></pre></td></tr></table></figure>

<h3 id="配置修改后更新"><a href="#配置修改后更新" class="headerlink" title="配置修改后更新"></a>配置修改后更新</h3><p>输入以下命令完成每次更新：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>这篇博客基于hexo和next初始配置完成的情况对博客进行主题功能和外观的优化，撰写初衷是将自身搭建博客进行记录，因为Hexo主题更新频繁，不同版本之间的配置处理并不完全一致，根据已有的参考需要进行实际优化处理，同时也对Hexo结构了解更深刻，希望将来能更多的自定义实现渲染效果的设计，搭建更自主化的博客。</p>
<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.jianshu.com/p/78c218f9d1e7" target="_blank" rel="noopener">设置阅读全文</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://hexo.io/zh-cn/docs/front-matter.html" target="_blank" rel="noopener">分类二级目录</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://wangjiezhe.com/posts/2018-10-29-Hexo-NexT-3/" target="_blank" rel="noopener">评论系统</a><a href="#fnref:3" rev="footnote"> ↩</a></span></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">4.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://blog.singee.me/2017/12/07/mist-img-center/" target="_blank" rel="noopener">图片居中设置</a><a href="#fnref:4" rev="footnote"> ↩</a></span></li><li id="fn:5"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">5.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://guanqr.com/study/blog/hexo-theme-next-customization/" target="_blank" rel="noopener">插入脚注</a><a href="#fnref:5" rev="footnote"> ↩</a></span></li><li id="fn:6"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">6.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://benzblog.site/2019-07-12-HexoTricks/" target="_blank" rel="noopener">注脚选择</a><a href="#fnref:6" rev="footnote"> ↩</a></span></li><li id="fn:7"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">7.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://blog.bill.moe/hexo-theme-next-config-optimization/" target="_blank" rel="noopener">分割线样式修改</a><a href="#fnref:7" rev="footnote"> ↩</a></span></li><li id="fn:8"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">8.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="http://eternalzttz.com/hexo-next.html" target="_blank" rel="noopener">页脚显示博客运行时间</a><a href="#fnref:8" rev="footnote"> ↩</a></span></li><li id="fn:9"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">9.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://yunhao.space/2018/06/27/hexo-leancloud-plugin-installation-tutor/" target="_blank" rel="noopener">部署LeanCloud显示阅读数量</a><a href="#fnref:9" rev="footnote"> ↩</a></span></li><li id="fn:10"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">10.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://wangyi.blog/2019/12/24/Next%E4%B8%BB%E9%A2%98%E6%97%A0%E6%B3%95%E8%8E%B7%E5%8F%96Leancloud%E9%98%85%E8%AF%BB%E6%AC%A1%E6%95%B0%E7%9A%84%E9%97%AE%E9%A2%98/" target="_blank" rel="noopener">Next主题无法获取Leancloud阅读次数的问题</a><a href="#fnref:10" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>技术分享</category>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>Next</tag>
        <tag>Hexo</tag>
        <tag>Mist</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows查看端口占用</title>
    <url>/Windows%E6%9F%A5%E7%9C%8B%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>在windows下需要查看端口占用情况，同时排查哪些应用正在使用当前端口<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Windows下如何查看某个端口被谁占用](https://www.runoob.com/w3cnote/windows-finds-port-usage.html)">[1]</span></a></sup>。</p>
<a id="more"></a>

<h2 id="命令行操作说明"><a href="#命令行操作说明" class="headerlink" title="命令行操作说明"></a>命令行操作说明</h2><h3 id="打开命令行（管理员身份）"><a href="#打开命令行（管理员身份）" class="headerlink" title="打开命令行（管理员身份）"></a>打开命令行（管理员身份）</h3><p>1） 在开始菜单搜索<code>cmd</code>，右键点击<code>命令行提示窗口</code>以管理员身份运行；</p>
<p>2） 按快捷组合键<code>Ctrl+r</code>，输入<code>cmd</code>。</p>
<h3 id="查看所有端口"><a href="#查看所有端口" class="headerlink" title="查看所有端口"></a>查看所有端口</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netstat -ano</span><br></pre></td></tr></table></figure>
<p>每个地址后面显示的即端口号，最后一列表示对应的进程号PID。</p>
<p><img src="https://www.runoob.com/wp-content/uploads/2018/07/1530674518-5109-2159693-5342695777bde48d.png" alt="系统所有端口信息查看"><i class="img-caption">◎ 系统所有端口信息查看</i></p>
<h3 id="查看具体端口使用的进程"><a href="#查看具体端口使用的进程" class="headerlink" title="查看具体端口使用的进程"></a>查看具体端口使用的进程</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netstat -aon|findstr <span class="string">"8081"</span></span><br></pre></td></tr></table></figure>
<p>显示使用当前端口的进程情况。</p>
<p><img src="https://www.runoob.com/wp-content/uploads/2018/07/1530674518-6203-2159693-10d9bae7a6e59b06.png" alt="端口对应使用进程查看"><i class="img-caption">◎ 端口对应使用进程查看</i></p>
<h3 id="查看指定进程"><a href="#查看指定进程" class="headerlink" title="查看指定进程"></a>查看指定进程</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tasklist|findstr <span class="string">"9088"</span></span><br></pre></td></tr></table></figure>
<p>查看是哪个进程或者程序占用了 8081 端口，结果是：node.exe。</p>
<p><img src="https://www.runoob.com/wp-content/uploads/2018/07/1530674518-3794-2159693-30d1a50103f28cea.png" alt="查看具体进程"><i class="img-caption">◎ 查看具体进程</i></p>
<h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>本文是用于Windows下端口被占用时的排查方法，由于在windows环境下较少使用命令行，对少用的命令不熟悉，所以记录下来。</p>
<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.runoob.com/w3cnote/windows-finds-port-usage.html" target="_blank" rel="noopener">Windows下如何查看某个端口被谁占用</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Handbook</category>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>端口查看</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建个人博客(Hexo+Next+Github）</title>
    <url>/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>在经过多个教程摸索和尝试后，发现手把手有时候挺坑人的，毕竟经验还是要自己攒，不然没踩的坑迟早要踩到，最终我的个人博客<a href="https://linwhitehat.github.io/">林深时见璐</a>搭建完成，这篇教程会从本地博客建立到实现美观的网络博客进行记录分享，这篇博客也就会随着本博客的每一次升级完善而补充，希望能给想自建博客的朋友们提供帮助。</p>
<a id="more"></a>

<h2 id="最初的诞生"><a href="#最初的诞生" class="headerlink" title="最初的诞生"></a>最初的诞生</h2><p>我采用的搭建博客的方式是使用 <a href="https://pages.github.com/" target="_blank" rel="noopener">GitHub Pages</a> + <a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a> 的方式，这个应该是我摸索之后认为的对新手最友好也最优质的方式，只需要投入时间学习和运营，就能拥有美观的个人博客。以下的1 - 3小点是博客的雏形构建<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[博客雏形安装](https://www.jianshu.com/p/956c44c87fb1)">[1]</span></a></sup>。</p>
<h3 id="注册Github账号"><a href="#注册Github账号" class="headerlink" title="注册Github账号"></a>注册Github账号</h3><p>要使用 GitHub Pages，首先你要注册一个<a href="https://github.com/" target="_blank" rel="noopener">GitHub</a>账号。</p>
<p><img src="/images/blog-1.png" alt="GitHub注册页"><i class="img-caption">◎ GitHub注册页</i></p>
<h3 id="安装必备软件"><a href="#安装必备软件" class="headerlink" title="安装必备软件"></a>安装必备软件</h3><p>1) 安装<a href="https://git-scm.com/download/win" target="_blank" rel="noopener">Git</a>客户端</p>
<p>2) 安装<a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a></p>
<h3 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h3><ol>
<li>新建博客</li>
</ol>
<p>配置GitHub，步骤如下:</p>
<p>1) 登录GitHub后新建项目（new repository），项目名由两部分组成即GitHub账号名和固定后缀<code>.github.io</code>，比如我的项目就是<code>linwhitehat.github.io</code>，填写完点击创建项目（create repository）。</p>
<p>2) 配置GitHub SSH密钥，本地打开git bash，输入<code>ssh-keygen -t rsa -C &quot;your&#39;s emaill address&quot;</code>，其中your’s email address换成GitHub账号的邮箱地址，第一次点击回车键（Enter）会显示存储位置，第二次点击回车键会显示输入密钥，按照要求输入密钥两次(输入过程是看不到密钥的)，之后在第一次显示的存储位置打开文件id_rsa.pub，复制文件内所有内容，在GitHub中点击头像可看的setting选项，在setting选项中可看到SSH and GPG keys选项，点击new SSH，然后输入title（方便密钥管理的名字），将刚才复制的内容粘贴到key中。</p>
<p>3）创建本地仓库，在本地选择不包含中文的文件路径，新建一个文件夹，进入文件夹并点击右键选择git bash，输入以下命令进行设置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">git config --global user.name <span class="string">"Your's name"</span></span><br><span class="line">git config --global user.email <span class="string">"Your's email address"</span></span><br></pre></td></tr></table></figure>
<p>其中<code>Your&#39;s name</code>和<code>Your&#39;s email address</code>替换为GitHub账户名和对应邮箱地址。</p>
<p>4) 安装Hexo，按照之前方式进入git bash终端，输入<code>node</code>检测Node.js是否安装成功，若出现<code>&gt;</code>则表示正常，退出node模式，输入以下命令安装Hexo：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br><span class="line">hexo version</span><br></pre></td></tr></table></figure>
<p>看到输出版本号等信息表示安装Hexo成功，在当前新建的文件夹下新建一个hexo文件夹，在hexo文件夹中进入git bash，输入以下命令配置hexo，完成之后，在浏览器输入<code>http://localhost:4000</code>，正常则可看到初始化的博客，到此便完成本地博客的建立。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init</span><br><span class="line">npm install</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>5）配置Hexo到GitHub，在hexo文件夹下存在一个配置文件<code>_config.yml</code>，打开后可看到文件最后部分为：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"> <span class="attr">type:</span></span><br></pre></td></tr></table></figure>
<p>将其修改为以下内容，其中<code>yourname</code>为GitHub账号名：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span>  </span><br><span class="line"> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line"> <span class="attr">repository:</span> <span class="string">http://github.com/yourname/yourname.github.io.git</span></span><br><span class="line"> <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>
<p>保存后，在当前文件夹打开git bash并输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<p>若出现错误显示<code>ERROR Deployer not found: git</code>，则输入以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<p>若弹出填写GitHub账号用户名和密码则正常填写，完成之后在浏览器输入<code>https://yourname.github.io</code>，yourname替换为GitHub账户名，即可通过互联网访问博客。</p>
<p>6）如果不想自己新建，可以使用现有的他人博客项目进行改建，见<a href="#Section2">第2小节</a>。</p>
<ol start="2">
<li><span id="Section2">使用已有的博客模板</span></li>
</ol>
<p>1) 注册完成后搜索 <code>linwhitehat.github.io</code> 进入<a href="https://github.com/linwhitehat/linwhitehat.github.io" target="_blank" rel="noopener">我的仓库</a></p>
<p><img src="/images/blog-2.png" alt="GitHub项目"><i class="img-caption">◎ GitHub项目</i></p>
<p>点击右上角的 <strong>Fork</strong> 将我的仓库拉倒你的账号下</p>
<p>稍等一下，点击刷新，你会看到<strong>Fork</strong>了成功的页面</p>
<p><img src="/images/blog-3.png" alt="Fork项目"><i class="img-caption">◎ Fork项目</i></p>
<p>2) 修改仓库名</p>
<p>点击<strong>settings</strong>进入设置</p>
<p><img src="/images/blog-4.png" alt="项目设置修改"><i class="img-caption">◎ 项目设置修改</i></p>
<p id = "Rename"></p>
修改仓库名为 `你的Github账号名.github.io`，然后 Rename

<p><img src="/images/blog-5.png" alt="修改项目名"><i class="img-caption">◎ 修改项目名</i></p>
<p>这时你在在浏览器中输入 <code>你的Github账号名.github.io</code> 例如:<code>linwhitehat.github.io</code></p>
<p>你将会看到如下界面</p>
<p><img src="/images/blog-6.png" alt="博客首页"><i class="img-caption">◎ 博客首页</i></p>
<p>说明已经成功一半了😀当然，还需要修改博客的配置才能变成你的博客。</p>
<p>若是出现</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2178672-cfd55a22902a9d2c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="访问出错"><i class="img-caption">◎ 访问出错</i></p>
<p>则需要 <a href="#Rename">检查一下你的仓库名是否正确</a></p>
<h3 id="修改博客配置"><a href="#修改博客配置" class="headerlink" title="修改博客配置"></a>修改博客配置</h3><p>来到你的仓库，找到<code>_config.yml</code>文件,这是网站的全局配置文件。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2178672-c23d4a5d67c88084.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="博客配置文件"><i class="img-caption">◎ 博客配置文件</i></p>
<p>点击修改</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2178672-b37268df7a7852ca.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="修改配置文件"><i class="img-caption">◎ 修改配置文件</i></p>
<p>然后编辑<code>_config.yml</code>的内容</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2178672-0c8750f5a18dbe03.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="配置文件内容修改"><i class="img-caption">◎ 配置文件内容修改</i></p>
<p>接下来我们来详细说说以下配置文件的内容：</p>
<h3 id="基础设置说明"><a href="#基础设置说明" class="headerlink" title="基础设置说明"></a>基础设置说明</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Site settings</span></span><br><span class="line">title: Your Blog    				    <span class="comment">#你博客的标题</span></span><br><span class="line">SEOTitle: 你的博客 | Your Blog    	    <span class="comment">#显示在浏览器上搜索的时候显示的标题</span></span><br><span class="line">header-img: img/post-bg-rwd.jpg  	    <span class="comment">#显示在首页的背景图片</span></span><br><span class="line">email: You@gmail.com	</span><br><span class="line">description: <span class="string">"You Blog"</span>  			    <span class="comment">#网站介绍</span></span><br><span class="line">keyword: <span class="string">"L1n, L1n Blog"</span> <span class="comment">#关键词</span></span><br><span class="line">url: <span class="string">"https://linwhitehat.github.io"</span>  <span class="comment"># 这个就是填写你的博客地址</span></span><br><span class="line">baseurl: <span class="string">""</span>                           <span class="comment"># 这个我们不用填写</span></span><br></pre></td></tr></table></figure>

<p>至此，一个初具形态的博客便生成了。</p>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ol>
<li>本文中新建仓库建立博客的方式，在本地建立仓库后，又再新建一个hexo文件，且将hexo配置托管到GitHub之后，GitHub项目便被hexo文件夹下的<code>.deploy_git</code>覆盖，之后修改博客维护项目只需要在hexo文件夹下的git bash进行hexo处理即可。</li>
<li>Hexo卸载方式，在git bash执行以下命令：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-cli -g</span><br><span class="line">npm uninstall hexo -g</span><br></pre></td></tr></table></figure>
<p>博客相应的文件目录需要手动删除。</p>
<h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.jianshu.com/p/956c44c87fb1" target="_blank" rel="noopener">博客雏形安装</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>技术分享</category>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>Hexo Blog</tag>
        <tag>Next</tag>
        <tag>GitHub</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>LaTeX-Windows10安装教程</title>
    <url>/LaTeX%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>作为一名研究僧，写论文，写文档，写日志，写报告，写书……还是比较平常的一件事，而office系列对于排版要求严格又惜时如金的人而言还是次选，所以开始入坑LaTeX，经过慎重的调研之后，选择了texlive+texstudio的形式开始入坑，当然还有很多其他选择，如果写完这篇还记得会在参考链接下附上<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[TeX Live & TeXstudio 安装手记](https://www.cnblogs.com/joyeecheung/p/3596255.html)
">[1]</span></a></sup><sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[第一篇tex文档编写](http://www.ctex.org/OnlineDocuments)
">[2]</span></a></sup>。</p>
<a id="more"></a>

<h2 id="调研选择"><a href="#调研选择" class="headerlink" title="调研选择"></a>调研选择</h2><p>其实这部分只是自己做一点记录，急需安装教程的请跳过，请看第2节。</p>
<p>经过多番Google、csdn以及知乎的查阅，大概了解了latex的编译环境和编辑环境，主流的有ctex、texlive、texstudio+winedt等等，我的选择变化大致如下：</p>
<ol>
<li><p>在上过的一门算法课中老师推荐了跨平台下的latex集成工具，ctex被建议在windows下使用，所以最初我的选择是ctex，附上清华镜像，<a href="https://mirrors.tuna.tsinghua.edu.cn/ctex/legacy/2.9/" target="_blank" rel="noopener" title="ctex清华镜像">Ctex-mirror</a>，官方网站<a href="http://www.ctex.org/HomePage" target="_blank" rel="noopener">CTeX</a>，加上ctex对中文的支持很好，且集成工具完整，当下载3G的安装包时，我又调研了不少教程，但是在某csdn的教程中看的评论有人评价ctex已不维护很久，同时ctex安装后会对系统环境变量进行覆盖，想想这个风险还是挺大的，毕竟安装需要配置换件变量的应用还挺多的，这篇<a href="https://liam.page/texlive/" target="_blank" rel="noopener">博文</a>有说明，接着看到在不少教程中推荐texlive（可谓官方），这是由 TUG (TeX User Group) 维护和发布的tex系统，接着有了第2个选择；</p>
</li>
<li><p>开始调研texlive，看看官网<a href="https://tug.org/texlive/" target="_blank" rel="noopener" title="texlive">TexLive</a>，维护还是比较好的，有2019最新版本，有多国镜像，有完整教学文档，感觉比ctex完善很多，果断放弃ctex，尽管这个时候安装文件也下载得差不多了，同时看到texstudio是tex编辑的不错的集成环境，官方的介绍是这样的：</p>
</li>
</ol>
<p><em>TeXstudio is an integrated writing environment for creating LaTeX documents. Our goal is to make writing LaTeX as easy and comfortable as possible. Therefore TeXstudio has numerous features like syntax-highlighting, integrated viewer, reference checking and various assistants.</em></p>
<p>安装提供zip压缩包直接解压使用，很适合我这种不喜欢安装包的人，因为便于迁移，抉择已定，开始下载和安装。</p>
<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><blockquote>
<p>先提供需要安装的文件（texlive和texstudio）的<a href="https://pan.baidu.com/s/1mRKV0VeNfjxhY6qGvSQdLw" target="_blank" rel="noopener" title="网盘链接">网盘链接</a>，提取码：uhbe </p>
</blockquote>
<p>官方提供了下载方式：</p>
<ol>
<li>texlive，<a href="https://mirror.bjtu.edu.cn/ctan/systems/texlive/Images/texlive2019.iso" target="_blank" rel="noopener">官方镜像</a>，如果访问不了，可以访问国内镜像，如<a href="http://mirrors.ustc.edu.cn/CTAN/systems/texlive/" target="_blank" rel="noopener">中科大镜像</a>；</li>
<li>texstudio，我选择的是zip压缩文件形式，<a href="https://github.com/texstudio-org/texstudio/releases/download/2.12.16/texstudio-2.12.16-win-portable-qt5.zip" target="_blank" rel="noopener">下载</a>；</li>
</ol>
<p>当然也可以直接下载我网盘分享的镜像和安装包，可以使用官方提供的md5值进行比对验证文件没有被篡改。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="TexLive-安装"><a href="#TexLive-安装" class="headerlink" title="TexLive 安装"></a>TexLive 安装</h3><p>下载好iso文件之后，由于我是win10系统，可以直接加载iso镜像文件，因此双击打开即可，如果是win7及以前的版本需要先解压iso文件，双击打开install-tl-advanced.bat文件，会出现以下界面：</p>
<p><img src="/images/post-texlive-install-1.jpg" alt="安装启动界面"><i class="img-caption">◎ 安装启动界面</i></p>
<p>点击<em>修改</em>更换需要安装的文件路径，路径建议不要带有中文和特殊字符；<br>点击<em>Advanced</em>修改安装选项，但默认是所有都选上，所以可以不用修改（因为涉及调用的宏包以及scheme选择，如果不了解还是默认，避免后续麻烦）；<br>点击<em>安装</em>，然后就是漫长的安装过程，安装期间可以做自己的事情，安装完成后显示如下：</p>
<p><img src="/images/post-texlive-install-2.jpg" alt="安装完成界面"><i class="img-caption">◎ 安装完成界面</i></p>
<p>做一下安装是否成功的检查：</p>
<ol>
<li>在开始菜单中搜索<em>TeX Live command-line</em>，执行以下命令：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xelatex -v</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>如果正常会显示如下信息，即正常的texlive版本号：</p>
<p><img src="/images/post-texlive-test-1.jpg" alt="测试正常界面"><i class="img-caption">◎ 测试正常界面</i></p>
<p>如果显示错误如下，应该是系统环境变量的问题，进入系统环境变量（系统属性-&gt;高级系统设置-&gt;环境变量），将<em>Path</em>环境变量新增texlive进去，即将安装好的texlive文件目录下的bin文件夹所在的路径作为环境变量。</p>
<p><img src="/images/post-texlive-test-2.jpg" alt="测试错误界面"><i class="img-caption">◎ 测试错误界面</i></p>
<h3 id="TexStudio-安装"><a href="#TexStudio-安装" class="headerlink" title="TexStudio 安装"></a>TexStudio 安装</h3><p>下载好zip压缩文件之后，直接解压就可以使用，十分方便！</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>主要是texstudio需要进行配置，更适合国内人士使用。</p>
<h3 id="语言设置"><a href="#语言设置" class="headerlink" title="语言设置"></a>语言设置</h3><p>打开texstudio之后，在主界面中显示的是英文，点击菜单栏的<em>Options</em>，点击<em>Configure TeXstudio</em>，在<em>General</em>选项下将<em>Language</em>选择为<em>zh_CN</em>，点击确定；</p>
<h3 id="编译环境设置"><a href="#编译环境设置" class="headerlink" title="编译环境设置"></a>编译环境设置</h3><p>在语言设置一样的窗口，此时显示语言是中文，点击<em>构建</em>-&gt;<em>默认编译器<em>设置为”XeLaTeX”，支持中文LaTeX文档；<br>将</em>构建</em>-&gt;<em>默认文献工具<em>设置为”Biber”；<br>在</em>命令</em>-&gt;<em>XeLaTeX</em>设置编译参数，使用 -shell-escape 参数以支持“minted”代码排版宏包；</p>
<p>点击<em>构建</em>-&gt;<em>默认编译器<em>设置为”Latexmk”实现一次性编译；<br>将</em>命令</em>-&gt;<em>Latexmk<em>的 -pdf 参数修改为 -xelatex 以支持中文；<br>在</em>命令</em>-&gt;<em>Latexmk</em>设置编译参数，使用 -shell-escape 参数以支持“minted”代码排版宏包；<br>点击确定</p>
<p>点击菜单栏<em>帮助</em>-&gt;<em>检查Latex安装信息</em>，若正确输出系统报告，说明texlive正常工作。</p>
<h2 id="第一篇tex文档"><a href="#第一篇tex文档" class="headerlink" title="第一篇tex文档"></a>第一篇tex文档</h2><p>参照这篇博客，<a href="https://blog.csdn.net/yeler082/article/details/80665186" target="_blank" rel="noopener">Texlive+TeXstudio 入门安装使用</a>，照着输入，然后点击两个绿色箭头重叠的按钮，可以看到实时生成的文档。</p>
<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.cnblogs.com/joyeecheung/p/3596255.html" target="_blank" rel="noopener">TeX Live &amp; TeXstudio 安装手记</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="http://www.ctex.org/OnlineDocuments" target="_blank" rel="noopener">第一篇tex文档编写</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Handbook</category>
        <category>Latex</category>
      </categories>
      <tags>
        <tag>Latex安装</tag>
      </tags>
  </entry>
</search>
